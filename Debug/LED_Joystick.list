
LED_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb8  08003bb8  00031714  2**0
                  CONTENTS
  4 .ARM          00000000  08003bb8  08003bb8  00031714  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bb8  08003bb8  00031714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00011714  20000000  08003bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20011714  080152d4  00031714  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011794  080152d4  00031794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031714  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007019  00000000  00000000  00031744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dff  00000000  00000000  0003875d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0003a560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  0003acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028fb6  00000000  00000000  0003b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abe3  00000000  00000000  000642de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8e5d  00000000  00000000  0006eec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a8  00000000  00000000  00167d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20011714 	.word	0x20011714
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003260 	.word	0x08003260

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20011718 	.word	0x20011718
 80001cc:	08003260 	.word	0x08003260

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b32      	ldr	r3, [pc, #200]	; (8000380 <GPIO_Init+0xe0>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a31      	ldr	r2, [pc, #196]	; (8000380 <GPIO_Init+0xe0>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <GPIO_Init+0xe0>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80002ce:	4b2c      	ldr	r3, [pc, #176]	; (8000380 <GPIO_Init+0xe0>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a2b      	ldr	r2, [pc, #172]	; (8000380 <GPIO_Init+0xe0>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b29      	ldr	r3, [pc, #164]	; (8000380 <GPIO_Init+0xe0>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b26      	ldr	r3, [pc, #152]	; (8000380 <GPIO_Init+0xe0>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a25      	ldr	r2, [pc, #148]	; (8000380 <GPIO_Init+0xe0>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b23      	ldr	r3, [pc, #140]	; (8000380 <GPIO_Init+0xe0>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b20      	ldr	r3, [pc, #128]	; (8000380 <GPIO_Init+0xe0>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <GPIO_Init+0xe0>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <GPIO_Init+0xe0>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, (uint16_t)0x0200, GPIO_PIN_RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f001 fdc4 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (uint16_t)0x2000, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032e:	f001 fdbd 	bl	8001eac <HAL_GPIO_WritePin>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000332:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000336:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000338:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800033c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	480e      	ldr	r0, [pc, #56]	; (8000384 <GPIO_Init+0xe4>)
 800034a:	f001 fc05 	bl	8001b58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 800034e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000352:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000354:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000358:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0314 	add.w	r3, r7, #20
 8000362:	4619      	mov	r1, r3
 8000364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000368:	f001 fbf6 	bl	8001b58 <HAL_GPIO_Init>


	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	f001 fa37 	bl	80017e0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000372:	2017      	movs	r0, #23
 8000374:	f001 fa34 	bl	80017e0 <HAL_NVIC_EnableIRQ>

}
 8000378:	bf00      	nop
 800037a:	3728      	adds	r7, #40	; 0x28
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40021000 	.word	0x40021000
 8000384:	48000800 	.word	0x48000800

08000388 <HAL_GPIO_EXTI_Callback>:

//Callback function for button press
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == (uint16_t)0x2000){
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000398:	d101      	bne.n	800039e <HAL_GPIO_EXTI_Callback+0x16>
		toggle_local();
 800039a:	f000 fc55 	bl	8000c48 <toggle_local>
	}

	if (GPIO_Pin == (uint16_t)0x0200){
 800039e:	88fb      	ldrh	r3, [r7, #6]
 80003a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003a4:	d101      	bne.n	80003aa <HAL_GPIO_EXTI_Callback+0x22>
		local_command();
 80003a6:	f000 fc6b 	bl	8000c80 <local_command>
	}

}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <EXTI15_10_IRQHandler>:

//interrupt handler for blue button
void EXTI15_10_IRQHandler() {
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80003b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80003ba:	f001 fd8f 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <EXTI9_5_IRQHandler>:

//interrupt handler for external button
void EXTI9_5_IRQHandler() {
 80003c2:	b580      	push	{r7, lr}
 80003c4:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80003c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ca:	f001 fd87 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <GPIO_Output_Init>:
// GPIO Output initialization for GPIO banks A, B, C, and D only
// Expects GPIO to be GPIOA, GPIOB, GPIOC, or GPIOD.
// pin is expected to be 0 through 15
// Note -- if the clock is not enabled the 16 GPIO pins are non-functional!
void GPIO_Output_Init( GPIO_TypeDef *GPIO, uint32_t pin )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	// Enable the peripheral clocks of for GPIO
	if ( GPIO == GPIOA )
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003e4:	d106      	bne.n	80003f4 <GPIO_Output_Init+0x20>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN ;
 80003e6:	4b36      	ldr	r3, [pc, #216]	; (80004c0 <GPIO_Output_Init+0xec>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	4a35      	ldr	r2, [pc, #212]	; (80004c0 <GPIO_Output_Init+0xec>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f2:	e01f      	b.n	8000434 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOB )
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <GPIO_Output_Init+0xf0>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_Output_Init+0x36>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN ;
 80003fc:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <GPIO_Output_Init+0xec>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a2f      	ldr	r2, [pc, #188]	; (80004c0 <GPIO_Output_Init+0xec>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000408:	e014      	b.n	8000434 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOC )
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a2e      	ldr	r2, [pc, #184]	; (80004c8 <GPIO_Output_Init+0xf4>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_Output_Init+0x4c>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN ;
 8000412:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <GPIO_Output_Init+0xec>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	4a2a      	ldr	r2, [pc, #168]	; (80004c0 <GPIO_Output_Init+0xec>)
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041e:	e009      	b.n	8000434 <GPIO_Output_Init+0x60>
	else if ( GPIO == GPIOD )
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <GPIO_Output_Init+0xf8>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d145      	bne.n	80004b4 <GPIO_Output_Init+0xe0>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN ;
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <GPIO_Output_Init+0xec>)
 800042a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042c:	4a24      	ldr	r2, [pc, #144]	; (80004c0 <GPIO_Output_Init+0xec>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	64d3      	str	r3, [r2, #76]	; 0x4c
	else
		return ;

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIO->MODER &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // clear to input mode (00)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	2103      	movs	r1, #3
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	43db      	mvns	r3, r3
 8000444:	401a      	ands	r2, r3
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (uint32_t)1 << ( 2 * pin ) ;      //  Output(01)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f303 	lsl.w	r3, r1, r3
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	601a      	str	r2, [r3, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIO->OSPEEDR &= ~( (uint32_t)3 << ( 2 * pin ) ) ;	// set to cleared which is low speed
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2103      	movs	r1, #3
 8000468:	fa01 f303 	lsl.w	r3, r1, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	401a      	ands	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	609a      	str	r2, [r3, #8]
	GPIO->OSPEEDR |=   (uint32_t)3 << ( 2 * pin ) ;  // High speed
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	2103      	movs	r1, #3
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	609a      	str	r2, [r3, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIO->OTYPER &= ~( (uint32_t)1 << pin ) ;       // Push-pull
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685a      	ldr	r2, [r3, #4]
 800048c:	2101      	movs	r1, #1
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	fa01 f303 	lsl.w	r3, r1, r3
 8000494:	43db      	mvns	r3, r3
 8000496:	401a      	ands	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	605a      	str	r2, [r3, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIO->PUPDR   &= ~( (uint32_t)3 << ( 2 * pin ) ) ;  // No pull-up, no pull-down
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	2103      	movs	r1, #3
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	401a      	ands	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	e000      	b.n	80004b6 <GPIO_Output_Init+0xe2>
		return ;
 80004b4:	bf00      	nop
}
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000
 80004c4:	48000400 	.word	0x48000400
 80004c8:	48000800 	.word	0x48000800
 80004cc:	48000c00 	.word	0x48000c00

080004d0 <LED_Init>:

// set up PA5, PA6, and PA7 to drive LEDs
void LED_Init(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	GPIO_Output_Init( GPIOA, NUCLEO_GREEN_LED_PIN ) ;	// hard wired PA5 to on-board LD2 LED
 80004d4:	2105      	movs	r1, #5
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f7ff ff7b 	bl	80003d4 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D12 ) ;		// init PA6 as output (D12)
 80004de:	2106      	movs	r1, #6
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f7ff ff76 	bl	80003d4 <GPIO_Output_Init>
	GPIO_Output_Init( GPIOA, ARDUINO_D11 ) ;		// init PA7 as output (D11)
 80004e8:	2107      	movs	r1, #7
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f7ff ff71 	bl	80003d4 <GPIO_Output_Init>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <LED_On>:

//******************************************************************************************
// Turn Green LED On and GPIOA 6 and 7 to ON
//******************************************************************************************
void LED_On(void){
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ; // PA5
 80004fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004fe:	695b      	ldr	r3, [r3, #20]
 8000500:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000504:	f043 0320 	orr.w	r3, r3, #32
 8000508:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 800050a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000518:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 800051a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6153      	str	r3, [r2, #20]
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LED_Off>:

//******************************************************************************************
// Turn Green LED Off and GPIOA 6 and 7 to OFF
//******************************************************************************************
void LED_Off(void){
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	GPIOA->ODR &= ~( (uint32_t)1 << NUCLEO_GREEN_LED_PIN );
 8000538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000542:	f023 0320 	bic.w	r3, r3, #32
 8000546:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D12 ) ;	// PA6
 8000548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000556:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~( (uint32_t)1 << ARDUINO_D11 ) ;	// PA7
 8000558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000566:	6153      	str	r3, [r2, #20]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LED_Toggle>:

//******************************************************************************************
// Set Green LD2 Nucleo LED and GPIOA 6 and 7 to opposite states
//******************************************************************************************
void LED_Toggle(void){
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (uint32_t)1 << NUCLEO_GREEN_LED_PIN ;
 8000576:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000580:	f083 0320 	eor.w	r3, r3, #32
 8000584:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D12 ;	// PA6
 8000586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000590:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000594:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= (uint32_t)1 << ARDUINO_D11 ;	// PA7
 8000596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80005a4:	6153      	str	r3, [r2, #20]
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80005b6:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <System_Clock_Init+0x1b4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a6a      	ldr	r2, [pc, #424]	; (8000764 <System_Clock_Init+0x1b4>)
 80005bc:	f023 0307 	bic.w	r3, r3, #7
 80005c0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80005c2:	4b68      	ldr	r3, [pc, #416]	; (8000764 <System_Clock_Init+0x1b4>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a67      	ldr	r2, [pc, #412]	; (8000764 <System_Clock_Init+0x1b4>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80005ce:	4b66      	ldr	r3, [pc, #408]	; (8000768 <System_Clock_Init+0x1b8>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a65      	ldr	r2, [pc, #404]	; (8000768 <System_Clock_Init+0x1b8>)
 80005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80005da:	bf00      	nop
 80005dc:	4b62      	ldr	r3, [pc, #392]	; (8000768 <System_Clock_Init+0x1b8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d0f9      	beq.n	80005dc <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80005e8:	2310      	movs	r3, #16
 80005ea:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80005ec:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <System_Clock_Init+0x1b8>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a5d      	ldr	r2, [pc, #372]	; (8000768 <System_Clock_Init+0x1b8>)
 80005f2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80005f6:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80005f8:	4b5b      	ldr	r3, [pc, #364]	; (8000768 <System_Clock_Init+0x1b8>)
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	061b      	lsls	r3, r3, #24
 8000600:	4959      	ldr	r1, [pc, #356]	; (8000768 <System_Clock_Init+0x1b8>)
 8000602:	4313      	orrs	r3, r2
 8000604:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000606:	4b58      	ldr	r3, [pc, #352]	; (8000768 <System_Clock_Init+0x1b8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a57      	ldr	r2, [pc, #348]	; (8000768 <System_Clock_Init+0x1b8>)
 800060c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000610:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000612:	bf00      	nop
 8000614:	4b54      	ldr	r3, [pc, #336]	; (8000768 <System_Clock_Init+0x1b8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000620:	d0f8      	beq.n	8000614 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000622:	4b51      	ldr	r3, [pc, #324]	; (8000768 <System_Clock_Init+0x1b8>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	4a50      	ldr	r2, [pc, #320]	; (8000768 <System_Clock_Init+0x1b8>)
 8000628:	f023 0303 	bic.w	r3, r3, #3
 800062c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800062e:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <System_Clock_Init+0x1b8>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	4a4d      	ldr	r2, [pc, #308]	; (8000768 <System_Clock_Init+0x1b8>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800063a:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <System_Clock_Init+0x1b8>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000642:	4a49      	ldr	r2, [pc, #292]	; (8000768 <System_Clock_Init+0x1b8>)
 8000644:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000648:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800064a:	4b47      	ldr	r3, [pc, #284]	; (8000768 <System_Clock_Init+0x1b8>)
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000652:	4a45      	ldr	r2, [pc, #276]	; (8000768 <System_Clock_Init+0x1b8>)
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <System_Clock_Init+0x1b8>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4a42      	ldr	r2, [pc, #264]	; (8000768 <System_Clock_Init+0x1b8>)
 8000660:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000664:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 8000666:	4b40      	ldr	r3, [pc, #256]	; (8000768 <System_Clock_Init+0x1b8>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	4a3f      	ldr	r2, [pc, #252]	; (8000768 <System_Clock_Init+0x1b8>)
 800066c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000670:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000672:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <System_Clock_Init+0x1b8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a3c      	ldr	r2, [pc, #240]	; (8000768 <System_Clock_Init+0x1b8>)
 8000678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800067c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 800067e:	bf00      	nop
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <System_Clock_Init+0x1b8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f9      	beq.n	8000680 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <System_Clock_Init+0x1b8>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a35      	ldr	r2, [pc, #212]	; (8000768 <System_Clock_Init+0x1b8>)
 8000692:	f023 0303 	bic.w	r3, r3, #3
 8000696:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <System_Clock_Init+0x1b8>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	4a32      	ldr	r2, [pc, #200]	; (8000768 <System_Clock_Init+0x1b8>)
 800069e:	f043 0303 	orr.w	r3, r3, #3
 80006a2:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80006a4:	bf00      	nop
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <System_Clock_Init+0x1b8>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	f003 030c 	and.w	r3, r3, #12
 80006ae:	2b0c      	cmp	r3, #12
 80006b0:	d1f9      	bne.n	80006a6 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <System_Clock_Init+0x1b8>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <System_Clock_Init+0x1b8>)
 80006b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006bc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <System_Clock_Init+0x1b8>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4a29      	ldr	r2, [pc, #164]	; (8000768 <System_Clock_Init+0x1b8>)
 80006c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006c8:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <System_Clock_Init+0x1b8>)
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <System_Clock_Init+0x1b8>)
 80006d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80006d4:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80006d6:	4b24      	ldr	r3, [pc, #144]	; (8000768 <System_Clock_Init+0x1b8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a23      	ldr	r2, [pc, #140]	; (8000768 <System_Clock_Init+0x1b8>)
 80006dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80006e0:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80006e2:	bf00      	nop
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <System_Clock_Init+0x1b8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006f0:	d0f8      	beq.n	80006e4 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <System_Clock_Init+0x1b8>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <System_Clock_Init+0x1b8>)
 80006f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80006fc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <System_Clock_Init+0x1b8>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	4a19      	ldr	r2, [pc, #100]	; (8000768 <System_Clock_Init+0x1b8>)
 8000704:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000708:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <System_Clock_Init+0x1b8>)
 800070c:	691b      	ldr	r3, [r3, #16]
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <System_Clock_Init+0x1b8>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <System_Clock_Init+0x1b8>)
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <System_Clock_Init+0x1b8>)
 800071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000720:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <System_Clock_Init+0x1b8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <System_Clock_Init+0x1b8>)
 8000728:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800072e:	bf00      	nop
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <System_Clock_Init+0x1b8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d0f9      	beq.n	8000730 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <System_Clock_Init+0x1b8>)
 800073e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000742:	4a09      	ldr	r2, [pc, #36]	; (8000768 <System_Clock_Init+0x1b8>)
 8000744:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <System_Clock_Init+0x1b8>)
 800074e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <System_Clock_Init+0x1b8>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000756:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40022000 	.word	0x40022000
 8000768:	40021000 	.word	0x40021000

0800076c <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <UART2_Init+0x40>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <UART2_Init+0x40>)
 8000776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077a:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <UART2_Init+0x40>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <UART2_Init+0x40>)
 8000784:	f023 030c 	bic.w	r3, r3, #12
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <UART2_Init+0x40>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <UART2_Init+0x40>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 800079c:	f000 f80a 	bl	80007b4 <UART2_GPIO_Init>
	USART_Init(USART2);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <UART2_Init+0x44>)
 80007a2:	f000 f84f 	bl	8000844 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40004400 	.word	0x40004400

080007b4 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <UART2_GPIO_Init+0x8c>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <UART2_GPIO_Init+0x8c>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80007c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80007d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007de:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007e2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80007e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80007f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007fe:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000802:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800080e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000812:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800081e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000822:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800082e:	f023 030c 	bic.w	r3, r3, #12
 8000832:	6053      	str	r3, [r2, #4]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f023 0201 	bic.w	r2, r3, #1
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f242 028d 	movw	r2, #8333	; 0x208d
 8000882:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f043 020c 	orr.w	r2, r3, #12
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <USART_Init+0x100>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d129      	bne.n	80008ec <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f043 0220 	orr.w	r2, r3, #32
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f023 0210 	bic.w	r2, r3, #16
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f023 0201 	bic.w	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a16      	ldr	r2, [pc, #88]	; (8000948 <USART_Init+0x104>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d10b      	bne.n	800090c <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <USART_Init+0x108>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	4a11      	ldr	r2, [pc, #68]	; (800094c <USART_Init+0x108>)
 8000906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800090a:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f043 0201 	orr.w	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000918:	bf00      	nop
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f9      	beq.n	800091a <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000926:	bf00      	nop
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f9      	beq.n	8000928 <USART_Init+0xe4>
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40004c00 	.word	0x40004c00
 8000948:	40004400 	.word	0x40004400
 800094c:	40013800 	.word	0x40013800

08000950 <USART_No_block_Read>:
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}


uint8_t USART_No_block_Read (USART_TypeDef * USARTx) {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	if (!(USARTx->ISR & USART_ISR_RXNE)){
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <USART_No_block_Read+0x18>
		// Wait until RXNE (RX not empty) bit is set
		return 0;
 8000964:	2300      	movs	r3, #0
 8000966:	e003      	b.n	8000970 <USART_No_block_Read+0x20>
	}
	else
		return ((uint8_t)(USARTx->RDR & 0xFF));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800096c:	b29b      	uxth	r3, r3
 800096e:	b2db      	uxtb	r3, r3
	// USART resets the RXNE flag automatically after reading DR

	// Reading USART_DR automatically clears the RXNE flag
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e014      	b.n	80009b8 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 800098e:	bf00      	nop
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	69db      	ldr	r3, [r3, #28]
 8000994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0f9      	beq.n	8000990 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80009aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009ae:	f000 f819 	bl	80009e4 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8e6      	bhi.n	800098e <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80009c0:	bf00      	nop
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f9      	beq.n	80009c2 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	61da      	str	r2, [r3, #28]
}   
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2264      	movs	r2, #100	; 0x64
 80009f0:	fb03 f202 	mul.w	r2, r3, r2
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <USART_Delay+0x3c>)
 80009f6:	fba3 1302 	umull	r1, r3, r3, r2
 80009fa:	1ad2      	subs	r2, r2, r3
 80009fc:	0852      	lsrs	r2, r2, #1
 80009fe:	4413      	add	r3, r2
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1f9      	bne.n	8000a04 <USART_Delay+0x20>
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	24924925 	.word	0x24924925

08000a24 <Error_Handler>:
#include "adc_demo.h"
#include "demo.h"

uint8_t one_second_elapsed = FALSE;

void Error_Handler () {
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	// Add error handler here if desired
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <command_handler>:
#include "printf.h"
#include "inputHandler.h"
#include "commands.h"

//Takes user input as param, calls appropriate handler or invalid statement
void command_handler(char* input){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

	if(strcmp(input, "HELP") == 0) help_handler();
 8000a3c:	4922      	ldr	r1, [pc, #136]	; (8000ac8 <command_handler+0x94>)
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fbc6 	bl	80001d0 <strcmp>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <command_handler+0x1c>
 8000a4a:	f000 f8db 	bl	8000c04 <help_handler>
		stop_handler();
	}
	else {
		mainprintf("\n\rInvalid Command, try running help to see list of available commands.\n\r");
	}
}
 8000a4e:	e036      	b.n	8000abe <command_handler+0x8a>
	else if(strcmp(input, "PLAY") == 0){
 8000a50:	491e      	ldr	r1, [pc, #120]	; (8000acc <command_handler+0x98>)
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fbbc 	bl	80001d0 <strcmp>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d105      	bne.n	8000a6a <command_handler+0x36>
		mainprintf("\n\rPLAY called\n\r");
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <command_handler+0x9c>)
 8000a60:	f000 fb38 	bl	80010d4 <mainprintf>
		play_handler();
 8000a64:	f000 f844 	bl	8000af0 <play_handler>
}
 8000a68:	e029      	b.n	8000abe <command_handler+0x8a>
	else if(strcmp(input, "NEXT") == 0) {
 8000a6a:	491a      	ldr	r1, [pc, #104]	; (8000ad4 <command_handler+0xa0>)
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff fbaf 	bl	80001d0 <strcmp>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d105      	bne.n	8000a84 <command_handler+0x50>
		mainprintf("\n\rNEXT called\n\r");
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <command_handler+0xa4>)
 8000a7a:	f000 fb2b 	bl	80010d4 <mainprintf>
		next_handler();
 8000a7e:	f000 f87b 	bl	8000b78 <next_handler>
}
 8000a82:	e01c      	b.n	8000abe <command_handler+0x8a>
	else if(strcmp(input, "PAUSE") == 0) {
 8000a84:	4915      	ldr	r1, [pc, #84]	; (8000adc <command_handler+0xa8>)
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fba2 	bl	80001d0 <strcmp>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d105      	bne.n	8000a9e <command_handler+0x6a>
		mainprintf("\n\rPAUSE called\n\r");
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <command_handler+0xac>)
 8000a94:	f000 fb1e 	bl	80010d4 <mainprintf>
		pause_handler();
 8000a98:	f000 f856 	bl	8000b48 <pause_handler>
}
 8000a9c:	e00f      	b.n	8000abe <command_handler+0x8a>
	else if(strcmp(input, "STOP") == 0) {
 8000a9e:	4911      	ldr	r1, [pc, #68]	; (8000ae4 <command_handler+0xb0>)
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fb95 	bl	80001d0 <strcmp>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <command_handler+0x84>
		mainprintf("\n\rSTOP called\n\r");
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <command_handler+0xb4>)
 8000aae:	f000 fb11 	bl	80010d4 <mainprintf>
		stop_handler();
 8000ab2:	f000 f855 	bl	8000b60 <stop_handler>
}
 8000ab6:	e002      	b.n	8000abe <command_handler+0x8a>
		mainprintf("\n\rInvalid Command, try running help to see list of available commands.\n\r");
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <command_handler+0xb8>)
 8000aba:	f000 fb0b 	bl	80010d4 <mainprintf>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08003278 	.word	0x08003278
 8000acc:	08003280 	.word	0x08003280
 8000ad0:	08003288 	.word	0x08003288
 8000ad4:	08003298 	.word	0x08003298
 8000ad8:	080032a0 	.word	0x080032a0
 8000adc:	080032b0 	.word	0x080032b0
 8000ae0:	080032b8 	.word	0x080032b8
 8000ae4:	080032cc 	.word	0x080032cc
 8000ae8:	080032d4 	.word	0x080032d4
 8000aec:	080032e4 	.word	0x080032e4

08000af0 <play_handler>:
int press_flag = 0;
int press_start = 0;
int curr = 0;

//'plays' song by turning on led
void play_handler() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  play_music();
 8000af4:	f000 fcd8 	bl	80014a8 <play_music>
  flag = 0;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <play_handler+0x34>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
  LED_On();
 8000afe:	f7ff fcfa 	bl	80004f6 <LED_On>
  parse_song_t(songs[song_c].p_song, songs[song_c].size);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <play_handler+0x38>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a09      	ldr	r2, [pc, #36]	; (8000b2c <play_handler+0x3c>)
 8000b08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <play_handler+0x38>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <play_handler+0x3c>)
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	440b      	add	r3, r1
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f000 fcd0 	bl	80014c0 <parse_song_t>

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20011730 	.word	0x20011730
 8000b28:	20011734 	.word	0x20011734
 8000b2c:	20011478 	.word	0x20011478

08000b30 <button_play>:
//broken code hack since playing music from button doesnt work
void button_play(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	flag = 0;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <button_play+0x14>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
	LED_On();
 8000b3a:	f7ff fcdc 	bl	80004f6 <LED_On>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20011730 	.word	0x20011730

08000b48 <pause_handler>:

//'pause' song by turning on flash flag
void pause_handler() {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  cut_music();
 8000b4c:	f000 fca0 	bl	8001490 <cut_music>

  flag = 1;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <pause_handler+0x14>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20011730 	.word	0x20011730

08000b60 <stop_handler>:

//'stops' song by turning off led
void stop_handler() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  flag = 0;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <stop_handler+0x14>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
  LED_Off();
 8000b6a:	f7ff fce3 	bl	8000534 <LED_Off>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20011730 	.word	0x20011730

08000b78 <next_handler>:

//'next' song by calling song parser
//keeps track of song count, and sends appropriate song to parser
void next_handler() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  flag = 0;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <next_handler+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]

  if (song_c++ > 4) {
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <next_handler+0x50>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	490f      	ldr	r1, [pc, #60]	; (8000bc8 <next_handler+0x50>)
 8000b8a:	600a      	str	r2, [r1, #0]
 8000b8c:	2b04      	cmp	r3, #4
 8000b8e:	dd02      	ble.n	8000b96 <next_handler+0x1e>
    song_c = 0;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <next_handler+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
  }
  parse_song(songs[song_c].p_song, songs[song_c].size);
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <next_handler+0x50>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <next_handler+0x54>)
 8000b9c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <next_handler+0x50>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4909      	ldr	r1, [pc, #36]	; (8000bcc <next_handler+0x54>)
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f000 fb68 	bl	8001284 <parse_song>

  mainprintf("Song %d info \n\r", song_c);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <next_handler+0x50>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <next_handler+0x58>)
 8000bbc:	f000 fa8a 	bl	80010d4 <mainprintf>

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20011730 	.word	0x20011730
 8000bc8:	20011734 	.word	0x20011734
 8000bcc:	20011478 	.word	0x20011478
 8000bd0:	08003330 	.word	0x08003330

08000bd4 <get_flag>:

//get flash flag
int get_flag() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return flag;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <get_flag+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20011730 	.word	0x20011730

08000bec <get_local>:

//get flash flag
int get_local() {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return local;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <get_local+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20011738 	.word	0x20011738

08000c04 <help_handler>:

/**
 * performs the on start, prints help commands to user.
 */
void help_handler() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  mainprintf("\n\r***REMOTE LED CONTROL MENU***\n\r");
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <help_handler+0x2c>)
 8000c0a:	f000 fa63 	bl	80010d4 <mainprintf>
  mainprintf("Available User Commands\n\r");
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <help_handler+0x30>)
 8000c10:	f000 fa60 	bl	80010d4 <mainprintf>
  mainprintf("NEXT – Show next song info\n\r");
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <help_handler+0x34>)
 8000c16:	f000 fa5d 	bl	80010d4 <mainprintf>
  mainprintf("PLAY – Play the song (LED on)\n\r");
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <help_handler+0x38>)
 8000c1c:	f000 fa5a 	bl	80010d4 <mainprintf>
  mainprintf("PAUSE – Pause the song (LED flash)\n\r");
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <help_handler+0x3c>)
 8000c22:	f000 fa57 	bl	80010d4 <mainprintf>
  mainprintf("STOP – Stop the song (LED off)\n\r");
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <help_handler+0x40>)
 8000c28:	f000 fa54 	bl	80010d4 <mainprintf>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08003340 	.word	0x08003340
 8000c34:	08003364 	.word	0x08003364
 8000c38:	08003380 	.word	0x08003380
 8000c3c:	080033a0 	.word	0x080033a0
 8000c40:	080033c4 	.word	0x080033c4
 8000c44:	080033ec 	.word	0x080033ec

08000c48 <toggle_local>:

//handle blue button click
void toggle_local() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  local = 1 - local;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <toggle_local+0x30>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1c3 0301 	rsb	r3, r3, #1
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <toggle_local+0x30>)
 8000c56:	6013      	str	r3, [r2, #0]
  if (local == 0) {
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <toggle_local+0x30>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <toggle_local+0x22>
    help_handler();
 8000c60:	f7ff ffd0 	bl	8000c04 <help_handler>
    stop_handler();
 8000c64:	f7ff ff7c 	bl	8000b60 <stop_handler>
  } else {
	stop_handler();
    mainprintf("\n\r***LOCAL LED CONTROL***\n\r");
  }
}
 8000c68:	e004      	b.n	8000c74 <toggle_local+0x2c>
	stop_handler();
 8000c6a:	f7ff ff79 	bl	8000b60 <stop_handler>
    mainprintf("\n\r***LOCAL LED CONTROL***\n\r");
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <toggle_local+0x34>)
 8000c70:	f000 fa30 	bl	80010d4 <mainprintf>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20011738 	.word	0x20011738
 8000c7c:	08003410 	.word	0x08003410

08000c80 <local_command>:

//handle s1 button click
void local_command() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  if (local == 1) {
 8000c84:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <local_command+0xf0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d16e      	bne.n	8000d6a <local_command+0xea>

    curr = get_millis();
 8000c8c:	f000 f936 	bl	8000efc <get_millis>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a38      	ldr	r2, [pc, #224]	; (8000d74 <local_command+0xf4>)
 8000c94:	6013      	str	r3, [r2, #0]

    if (press_flag == 0) {
 8000c96:	4b38      	ldr	r3, [pc, #224]	; (8000d78 <local_command+0xf8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d12b      	bne.n	8000cf6 <local_command+0x76>
      // ignore bounce
      if (curr - press_start > 15000) { //ignore bounce, see what command was
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <local_command+0xf4>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <local_command+0xfc>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000cac:	4293      	cmp	r3, r2
 8000cae:	dd5c      	ble.n	8000d6a <local_command+0xea>
        press_start = curr;
 8000cb0:	4b30      	ldr	r3, [pc, #192]	; (8000d74 <local_command+0xf4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <local_command+0xfc>)
 8000cb6:	6013      	str	r3, [r2, #0]
        press_flag++;
 8000cb8:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <local_command+0xf8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <local_command+0xf8>)
 8000cc0:	6013      	str	r3, [r2, #0]

        //see if pause or play
        if (local_c == 0) {
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <local_command+0x100>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <local_command+0x56>
          button_play();
 8000cca:	f7ff ff31 	bl	8000b30 <button_play>

          mainprintf("play\n\r");
 8000cce:	482d      	ldr	r0, [pc, #180]	; (8000d84 <local_command+0x104>)
 8000cd0:	f000 fa00 	bl	80010d4 <mainprintf>
 8000cd4:	e008      	b.n	8000ce8 <local_command+0x68>

        } else if (local_c == 1) {
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <local_command+0x100>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d104      	bne.n	8000ce8 <local_command+0x68>
          pause_handler();
 8000cde:	f7ff ff33 	bl	8000b48 <pause_handler>
          mainprintf("pause\n\r");
 8000ce2:	4829      	ldr	r0, [pc, #164]	; (8000d88 <local_command+0x108>)
 8000ce4:	f000 f9f6 	bl	80010d4 <mainprintf>
        }
        local_c = 1 - local_c;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <local_command+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1c3 0301 	rsb	r3, r3, #1
 8000cf0:	4a23      	ldr	r2, [pc, #140]	; (8000d80 <local_command+0x100>)
 8000cf2:	6013      	str	r3, [r2, #0]
        }
        press_start = curr;
      }
    }
  }
}
 8000cf4:	e039      	b.n	8000d6a <local_command+0xea>
      if (curr - press_start > 15000) { //ignore bounce, see what command was
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <local_command+0xf4>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <local_command+0xfc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000d04:	4293      	cmp	r3, r2
 8000d06:	dd30      	ble.n	8000d6a <local_command+0xea>
        if (curr - press_start < 100000) {//if multiple click with one second than next command
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <local_command+0xf4>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <local_command+0xfc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <local_command+0x10c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	dc08      	bgt.n	8000d2a <local_command+0xaa>
          next_handler();
 8000d18:	f7ff ff2e 	bl	8000b78 <next_handler>
          mainprintf("next\n\r");
 8000d1c:	481c      	ldr	r0, [pc, #112]	; (8000d90 <local_command+0x110>)
 8000d1e:	f000 f9d9 	bl	80010d4 <mainprintf>
          press_flag = 0;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <local_command+0xf8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e01b      	b.n	8000d62 <local_command+0xe2>
          if (local_c == 0) {
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <local_command+0x100>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <local_command+0xbe>
        	mainprintf("play\n\r");
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <local_command+0x104>)
 8000d34:	f000 f9ce 	bl	80010d4 <mainprintf>
        	button_play();
 8000d38:	f7ff fefa 	bl	8000b30 <button_play>
 8000d3c:	e008      	b.n	8000d50 <local_command+0xd0>
          } else if (local_c == 1) {
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <local_command+0x100>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d104      	bne.n	8000d50 <local_command+0xd0>
        	mainprintf("pause\n\r");
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <local_command+0x108>)
 8000d48:	f000 f9c4 	bl	80010d4 <mainprintf>
            pause_handler();
 8000d4c:	f7ff fefc 	bl	8000b48 <pause_handler>
          press_flag = 1;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <local_command+0xf8>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
          local_c = 1 - local_c;
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <local_command+0x100>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f1c3 0301 	rsb	r3, r3, #1
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <local_command+0x100>)
 8000d60:	6013      	str	r3, [r2, #0]
        press_start = curr;
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <local_command+0xf4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <local_command+0xfc>)
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20011738 	.word	0x20011738
 8000d74:	20011748 	.word	0x20011748
 8000d78:	20011740 	.word	0x20011740
 8000d7c:	20011744 	.word	0x20011744
 8000d80:	2001173c 	.word	0x2001173c
 8000d84:	0800342c 	.word	0x0800342c
 8000d88:	08003434 	.word	0x08003434
 8000d8c:	0001869f 	.word	0x0001869f
 8000d90:	0800343c 	.word	0x0800343c

08000d94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <HAL_DAC_MspInit+0x74>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d124      	bne.n	8000e00 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_DAC_MspInit+0x78>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000de6:	2310      	movs	r3, #16
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 feac 	bl	8001b58 <HAL_GPIO_Init>
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40007400 	.word	0x40007400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2224      	movs	r2, #36	; 0x24
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 f89f 	bl	8001f60 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <DAC_Init+0x5c>)
 8000e24:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <DAC_Init+0x60>)
 8000e26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <DAC_Init+0x5c>)
 8000e2a:	f000 fce7 	bl	80017fc <HAL_DAC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <DAC_Init+0x28>
  {
    Error_Handler();
 8000e34:	f7ff fdf6 	bl	8000a24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	; (8000e6c <DAC_Init+0x5c>)
 8000e54:	f000 fd66 	bl	8001924 <HAL_DAC_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <DAC_Init+0x52>
  {
    Error_Handler();
 8000e5e:	f7ff fde1 	bl	8000a24 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2001174c 	.word	0x2001174c
 8000e70:	40007400 	.word	0x40007400

08000e74 <DAC_Start>:

void DAC_Start () {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4802      	ldr	r0, [pc, #8]	; (8000e84 <DAC_Start+0x10>)
 8000e7c:	f000 fce0 	bl	8001840 <HAL_DAC_Start>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2001174c 	.word	0x2001174c

08000e88 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <DAC_Set_Value+0x1c>)
 8000e98:	f000 fd1f 	bl	80018da <HAL_DAC_SetValue>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2001174c 	.word	0x2001174c

08000ea8 <init_systick>:
static volatile uint8_t one_second_elapsed;


// This function is to Initialize SysTick registers
static void init_systick()
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	sys->SYST_CSR = 0;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <init_systick+0x50>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
	sys->SYST_RVR = TIMEOUT;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <init_systick+0x50>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f240 321f 	movw	r2, #799	; 0x31f
 8000ebc:	605a      	str	r2, [r3, #4]
	sys->SYST_CSR |= 1 << 2;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <init_systick+0x50>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <init_systick+0x50>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0204 	orr.w	r2, r2, #4
 8000ecc:	601a      	str	r2, [r3, #0]
	sys->SYST_CSR |= 1 << 1;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <init_systick+0x50>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <init_systick+0x50>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 0202 	orr.w	r2, r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
	sys->SYST_CSR |= 1;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <init_systick+0x50>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <init_systick+0x50>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	200114a8 	.word	0x200114a8

08000efc <get_millis>:

uint32_t millis = 0;

int get_millis(){
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return millis;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <get_millis+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20011764 	.word	0x20011764

08000f14 <SysTick_Handler>:

//counter
static uint32_t counter = 0;

//systick
void SysTick_Handler() {
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	counter++;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <SysTick_Handler+0x38>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <SysTick_Handler+0x38>)
 8000f20:	6013      	str	r3, [r2, #0]
	millis++;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <SysTick_Handler+0x3c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <SysTick_Handler+0x3c>)
 8000f2a:	6013      	str	r3, [r2, #0]
	if(counter == 100000) { //90000
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <SysTick_Handler+0x38>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <SysTick_Handler+0x40>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d105      	bne.n	8000f42 <SysTick_Handler+0x2e>
		one_second_elapsed = 1;
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SysTick_Handler+0x44>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <SysTick_Handler+0x38>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	}
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20011768 	.word	0x20011768
 8000f50:	20011764 	.word	0x20011764
 8000f54:	000186a0 	.word	0x000186a0
 8000f58:	20011760 	.word	0x20011760

08000f5c <second_elapsed>:


//second elapsed getter
int second_elapsed(){
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	return one_second_elapsed;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <second_elapsed+0x14>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	20011760 	.word	0x20011760

08000f74 <reset_second>:

//reset second
void reset_second(){
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	one_second_elapsed = 0;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <reset_second+0x14>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	20011760 	.word	0x20011760

08000f8c <run_demo>:


//init systick call project handler
void run_demo(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	init_systick() ;
 8000f90:	f7ff ff8a 	bl	8000ea8 <init_systick>
	inputLoop();
 8000f94:	f000 f802 	bl	8000f9c <inputLoop>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <inputLoop>:
#include "commandHandler.h"
#include "stm32l4xx.h"
#include "GPIO.h"
//Main Project Loop
//Continually read from input, handles backspace/enter, sends buffer off when enter is hit, handles flash if flag set
void inputLoop() {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
	help_handler();
 8000fa2:	f7ff fe2f 	bl	8000c04 <help_handler>

	int i = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
	char r;
	char inputBuffer[32];
	HAL_GPIO_WritePin(GPIOA, (uint16_t)0x0200, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f000 ff7a 	bl	8001eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, (uint16_t)0x2000, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f000 ff73 	bl	8001eac <HAL_GPIO_WritePin>

	memset(inputBuffer, 0, sizeof inputBuffer);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ffc7 	bl	8001f60 <memset>
	while (1){

		r = USART_No_block_Read(USART2);
 8000fd2:	4832      	ldr	r0, [pc, #200]	; (800109c <inputLoop+0x100>)
 8000fd4:	f7ff fcbc 	bl	8000950 <USART_No_block_Read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(r != '\0' && get_local() == 0) {
 8000fde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d04b      	beq.n	800107e <inputLoop+0xe2>
 8000fe6:	f7ff fe01 	bl	8000bec <get_local>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d146      	bne.n	800107e <inputLoop+0xe2>
			//if enter was pressed, send to command handler
			if(r == '\r') {
 8000ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ff4:	2b0d      	cmp	r3, #13
 8000ff6:	d111      	bne.n	800101c <inputLoop+0x80>
				inputBuffer[i] = '\0';
 8000ff8:	463a      	mov	r2, r7
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]

				command_handler(inputBuffer);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fd15 	bl	8000a34 <command_handler>
				i = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
				memset(inputBuffer, 0, sizeof inputBuffer);
 800100e:	463b      	mov	r3, r7
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f000 ffa3 	bl	8001f60 <memset>
 800101a:	e030      	b.n	800107e <inputLoop+0xe2>
			}
			//if backspace, remove char from buffer, update display
			else if (r == 0x08 || r == 0x7F){
 800101c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001020:	2b08      	cmp	r3, #8
 8001022:	d003      	beq.n	800102c <inputLoop+0x90>
 8001024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001028:	2b7f      	cmp	r3, #127	; 0x7f
 800102a:	d119      	bne.n	8001060 <inputLoop+0xc4>
				inputBuffer[--i] = '\0';
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b01      	subs	r3, #1
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
 8001032:	463a      	mov	r2, r7
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	4413      	add	r3, r2
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
				mainprintf("\r");
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <inputLoop+0x104>)
 800103e:	f000 f849 	bl	80010d4 <mainprintf>
				mainprintf(inputBuffer);
 8001042:	463b      	mov	r3, r7
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f845 	bl	80010d4 <mainprintf>
				mainprintf(" ");
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <inputLoop+0x108>)
 800104c:	f000 f842 	bl	80010d4 <mainprintf>
				mainprintf("\r");
 8001050:	4813      	ldr	r0, [pc, #76]	; (80010a0 <inputLoop+0x104>)
 8001052:	f000 f83f 	bl	80010d4 <mainprintf>
				mainprintf(inputBuffer);
 8001056:	463b      	mov	r3, r7
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f83b 	bl	80010d4 <mainprintf>
 800105e:	e00e      	b.n	800107e <inputLoop+0xe2>

			}
			else{
				// if normal char, add to buffer and display
				inputBuffer[i++] = r;
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	627a      	str	r2, [r7, #36]	; 0x24
 8001066:	3328      	adds	r3, #40	; 0x28
 8001068:	443b      	add	r3, r7
 800106a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800106e:	f803 2c28 	strb.w	r2, [r3, #-40]
				mainprintf("%c", r);
 8001072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001076:	4619      	mov	r1, r3
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <inputLoop+0x10c>)
 800107a:	f000 f82b 	bl	80010d4 <mainprintf>
			}
		}

		//check and handle toggle if paused
		if (get_flag()){
 800107e:	f7ff fda9 	bl	8000bd4 <get_flag>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0a4      	beq.n	8000fd2 <inputLoop+0x36>
			if(second_elapsed()) {
 8001088:	f7ff ff68 	bl	8000f5c <second_elapsed>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d09f      	beq.n	8000fd2 <inputLoop+0x36>
				LED_Toggle();
 8001092:	f7ff fa6e 	bl	8000572 <LED_Toggle>
				reset_second();
 8001096:	f7ff ff6d 	bl	8000f74 <reset_second>
		r = USART_No_block_Read(USART2);
 800109a:	e79a      	b.n	8000fd2 <inputLoop+0x36>
 800109c:	40004400 	.word	0x40004400
 80010a0:	08003444 	.word	0x08003444
 80010a4:	08003448 	.word	0x08003448
 80010a8:	0800344c 	.word	0x0800344c

080010ac <main>:
#include "UART.h"
#include "demo.h"
#include "GPIO.h"
#include "dac.h"

int main(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 80010b0:	f7ff fa7e 	bl	80005b0 <System_Clock_Init>
	LED_Init();
 80010b4:	f7ff fa0c 	bl	80004d0 <LED_Init>
	UART2_Init();
 80010b8:	f7ff fb58 	bl	800076c <UART2_Init>
	GPIO_Init();
 80010bc:	f7ff f8f0 	bl	80002a0 <GPIO_Init>
	DAC_Init ();
 80010c0:	f7ff fea6 	bl	8000e10 <DAC_Init>
	DAC_Start ();
 80010c4:	f7ff fed6 	bl	8000e74 <DAC_Start>

	// application run function
	run_demo() ;
 80010c8:	f7ff ff60 	bl	8000f8c <run_demo>
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <mainprintf>:
#include<printf.h>
#include "UART.h"

char buffer[80];

int mainprintf(const char * format, ...){
 80010d4:	b40f      	push	{r0, r1, r2, r3}
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b0c2      	sub	sp, #264	; 0x108
 80010da:	af00      	add	r7, sp, #0
	char buffer [256];
	    int len = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	    va_list args;
	    va_start (args, format);
 80010e2:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80010e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010ee:	601a      	str	r2, [r3, #0]
	    len = vsprintf (buffer, format, args);
 80010f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80010f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80010f8:	1d38      	adds	r0, r7, #4
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001100:	f001 f9d6 	bl	80024b0 <vsiprintf>
 8001104:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	    perror (buffer);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f000 ffca 	bl	80020a4 <perror>
	    va_end (args);
	    USART_Write (USART2, (uint8_t *)buffer, len);
 8001110:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <mainprintf+0x60>)
 800111a:	f7ff fc2f 	bl	800097c <USART_Write>
	    return len;
 800111e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8001122:	4618      	mov	r0, r3
 8001124:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001128:	46bd      	mov	sp, r7
 800112a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800112e:	b004      	add	sp, #16
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40004400 	.word	0x40004400

08001138 <parse_meta_events>:
	uint16_t division;


}HeaderStruct;

void parse_meta_events(unsigned char* song, int length){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e085      	b.n	8001254 <parse_meta_events+0x11c>
		if (song[i] == 0xff){
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d17c      	bne.n	800124e <parse_meta_events+0x116>
			if (song[i+1] == 0x03){
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d121      	bne.n	80011a6 <parse_meta_events+0x6e>
				mainprintf("SONG TITLE\n\r");
 8001162:	4841      	ldr	r0, [pc, #260]	; (8001268 <parse_meta_events+0x130>)
 8001164:	f7ff ffb6 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	e00e      	b.n	800118c <parse_meta_events+0x54>
					mainprintf("%c", song[i+3+j]);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1cda      	adds	r2, r3, #3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4413      	add	r3, r2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	483a      	ldr	r0, [pc, #232]	; (800126c <parse_meta_events+0x134>)
 8001182:	f7ff ffa7 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	3301      	adds	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3302      	adds	r3, #2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4293      	cmp	r3, r2
 800119c:	dbe7      	blt.n	800116e <parse_meta_events+0x36>
				}
				mainprintf("\n\r");
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <parse_meta_events+0x138>)
 80011a0:	f7ff ff98 	bl	80010d4 <mainprintf>
 80011a4:	e053      	b.n	800124e <parse_meta_events+0x116>
			}
			else if (song[i+1] == 0x51){
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b51      	cmp	r3, #81	; 0x51
 80011b2:	d124      	bne.n	80011fe <parse_meta_events+0xc6>
				mainprintf("TEMPO\n\r");
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <parse_meta_events+0x13c>)
 80011b6:	f7ff ff8d 	bl	80010d4 <mainprintf>
				mainprintf("0x");
 80011ba:	482f      	ldr	r0, [pc, #188]	; (8001278 <parse_meta_events+0x140>)
 80011bc:	f7ff ff8a 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e00e      	b.n	80011e4 <parse_meta_events+0xac>
					mainprintf("%x", song[i+3+j]);
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	1cda      	adds	r2, r3, #3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	4828      	ldr	r0, [pc, #160]	; (800127c <parse_meta_events+0x144>)
 80011da:	f7ff ff7b 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3301      	adds	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	3302      	adds	r3, #2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4293      	cmp	r3, r2
 80011f4:	dbe7      	blt.n	80011c6 <parse_meta_events+0x8e>
				}
				mainprintf("\n\r");
 80011f6:	481e      	ldr	r0, [pc, #120]	; (8001270 <parse_meta_events+0x138>)
 80011f8:	f7ff ff6c 	bl	80010d4 <mainprintf>
 80011fc:	e027      	b.n	800124e <parse_meta_events+0x116>
			}
			else if (song[i+1] == 0x02){
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d120      	bne.n	800124e <parse_meta_events+0x116>
				mainprintf("COPYRIGHT\n\r");
 800120c:	481c      	ldr	r0, [pc, #112]	; (8001280 <parse_meta_events+0x148>)
 800120e:	f7ff ff61 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	e00e      	b.n	8001236 <parse_meta_events+0xfe>
					mainprintf("%c", song[i+3+j]);
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	1cda      	adds	r2, r3, #3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <parse_meta_events+0x134>)
 800122c:	f7ff ff52 	bl	80010d4 <mainprintf>
				for (int j = 0; j < song[i+2]; j++){
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3302      	adds	r3, #2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4293      	cmp	r3, r2
 8001246:	dbe7      	blt.n	8001218 <parse_meta_events+0xe0>
				}
				mainprintf("\n\r");
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <parse_meta_events+0x138>)
 800124a:	f7ff ff43 	bl	80010d4 <mainprintf>
	for (int i = 0; i < length; i++){
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	f6ff af75 	blt.w	8001148 <parse_meta_events+0x10>
			}
		}

	}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08003450 	.word	0x08003450
 800126c:	08003460 	.word	0x08003460
 8001270:	08003464 	.word	0x08003464
 8001274:	08003468 	.word	0x08003468
 8001278:	08003470 	.word	0x08003470
 800127c:	08003474 	.word	0x08003474
 8001280:	08003478 	.word	0x08003478

08001284 <parse_song>:

//Song parser entry point. Provde song and array length
//Calls handlers
void parse_song(unsigned char* song, int length) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	//parseHeader(song);
	parse_meta_events(song, length);
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff51 	bl	8001138 <parse_meta_events>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e00a      	b.n	80012c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012b0:	f3af 8000 	nop.w
 80012b4:	4601      	mov	r1, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	60ba      	str	r2, [r7, #8]
 80012bc:	b2ca      	uxtb	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	3301      	adds	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dbf0      	blt.n	80012b0 <_read+0x12>
	}

return len;
 80012ce:	687b      	ldr	r3, [r7, #4]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e009      	b.n	80012fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60ba      	str	r2, [r7, #8]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	3301      	adds	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbf1      	blt.n	80012ea <_write+0x12>
	}
	return len;
 8001306:	687b      	ldr	r3, [r7, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_close>:

int _close(int file)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	return -1;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f000 fdca 	bl	8001f0c <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20018000 	.word	0x20018000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	2001176c 	.word	0x2001176c
 80013ac:	20011798 	.word	0x20011798

080013b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <SystemInit+0x64>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <SystemInit+0x64>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <SystemInit+0x68>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <SystemInit+0x68>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <SystemInit+0x68>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <SystemInit+0x68>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <SystemInit+0x68>)
 80013dc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013e0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013e4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <SystemInit+0x68>)
 80013e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ec:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <SystemInit+0x68>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <SystemInit+0x68>)
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <SystemInit+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SystemInit+0x64>)
 8001402:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001406:	609a      	str	r2, [r3, #8]
#endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	40021000 	.word	0x40021000

0800141c <find_mtrk>:

static tone_info tones[MAX_TONES] = {{0, 0}};
int note_c = 0;

//finds where event track begins, takes in song and length, returns index
int find_mtrk(unsigned char* song, int length){
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; i++){
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	e025      	b.n	8001478 <find_mtrk+0x5c>
			if (i + 4 < length){
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3304      	adds	r3, #4
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	dd1d      	ble.n	8001472 <find_mtrk+0x56>
				if (song[i] == 0x4d && song[i + 1] == 0x54 && song[i + 2] == 0x72 && song[i + 3] == 0x6b){
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b4d      	cmp	r3, #77	; 0x4d
 8001440:	d117      	bne.n	8001472 <find_mtrk+0x56>
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3301      	adds	r3, #1
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b54      	cmp	r3, #84	; 0x54
 800144e:	d110      	bne.n	8001472 <find_mtrk+0x56>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3302      	adds	r3, #2
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b72      	cmp	r3, #114	; 0x72
 800145c:	d109      	bne.n	8001472 <find_mtrk+0x56>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	3303      	adds	r3, #3
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b6b      	cmp	r3, #107	; 0x6b
 800146a:	d102      	bne.n	8001472 <find_mtrk+0x56>
					return i+3;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3303      	adds	r3, #3
 8001470:	e007      	b.n	8001482 <find_mtrk+0x66>
	for (int i = 0; i < length; i++){
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3301      	adds	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbd5      	blt.n	800142c <find_mtrk+0x10>
				}
		}
	}
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <cut_music>:

int play = 0;

//pause handler
void cut_music(){
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	play = 0;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <cut_music+0x14>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	20011778 	.word	0x20011778

080014a8 <play_music>:

//pause handler
void play_music(){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	play = 1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <play_music+0x14>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20011778 	.word	0x20011778

080014c0 <parse_song_t>:
 * INPUT
 * song char ar and length
 * output
 * none
 */
void parse_song_t(unsigned char* song, int length){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]

	int event_index = find_mtrk(song, length);
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffa5 	bl	800141c <find_mtrk>
 80014d2:	6178      	str	r0, [r7, #20]
	while (event_index < length){
 80014d4:	e052      	b.n	800157c <parse_song_t+0xbc>
		if (play == 0){
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <parse_song_t+0xd0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d053      	beq.n	8001586 <parse_song_t+0xc6>
			break;
		}
		if (song[event_index] == 0x90){ //find on event
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b90      	cmp	r3, #144	; 0x90
 80014e8:	d11a      	bne.n	8001520 <parse_song_t+0x60>
			add_tone(song[event_index + 1], song[event_index + 2]); //add note and power to tones
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3302      	adds	r3, #2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f000 f873 	bl	80015ec <add_tone>
			int j = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
			while (j < 200000){
 800150a:	e004      	b.n	8001516 <parse_song_t+0x56>
					j++;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	3301      	adds	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
					play_tones ();
 8001512:	f000 f8c1 	bl	8001698 <play_tones>
			while (j < 200000){
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4a1e      	ldr	r2, [pc, #120]	; (8001594 <parse_song_t+0xd4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	ddf6      	ble.n	800150c <parse_song_t+0x4c>
 800151e:	e028      	b.n	8001572 <parse_song_t+0xb2>
			}
		}

		else if (song[event_index] == 0x74){ //find off event
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b74      	cmp	r3, #116	; 0x74
 800152a:	d122      	bne.n	8001572 <parse_song_t+0xb2>
			if (second_elapsed()){
 800152c:	f7ff fd16 	bl	8000f5c <second_elapsed>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <parse_song_t+0x88>
				remove_tone (song[event_index + 1]); //remove notes from tones
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f88b 	bl	800165c <remove_tone>
 8001546:	e014      	b.n	8001572 <parse_song_t+0xb2>
			}
			else{
				int i = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
				while (i < 10000){
 800154c:	e004      	b.n	8001558 <parse_song_t+0x98>
					i++;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
					play_tones ();
 8001554:	f000 f8a0 	bl	8001698 <play_tones>
				while (i < 10000){
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f242 720f 	movw	r2, #9999	; 0x270f
 800155e:	4293      	cmp	r3, r2
 8001560:	ddf5      	ble.n	800154e <parse_song_t+0x8e>
				}
				remove_tone (song[event_index + 1]);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f875 	bl	800165c <remove_tone>
			}
		}
		event_index ++;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
		play_tones (); //play tone
 8001578:	f000 f88e 	bl	8001698 <play_tones>
	while (event_index < length){
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	dba8      	blt.n	80014d6 <parse_song_t+0x16>
	}

}
 8001584:	e000      	b.n	8001588 <parse_song_t+0xc8>
			break;
 8001586:	bf00      	nop
}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20011778 	.word	0x20011778
 8001594:	00030d3f 	.word	0x00030d3f

08001598 <hertz_to_duration>:


// Convert from hertz to ticks
uint16_t hertz_to_duration (float hertz) {
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (hertz == 0)
 80015a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ae:	d101      	bne.n	80015b4 <hertz_to_duration+0x1c>
		return 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	e012      	b.n	80015da <hertz_to_duration+0x42>
	float duration = 1 / hertz;
 80015b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
	return (uint16_t) (duration * TICK_SPEED);
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80015e8 <hertz_to_duration+0x50>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d4:	ee17 3a90 	vmov	r3, s15
 80015d8:	b29b      	uxth	r3, r3
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	47c35000 	.word	0x47c35000

080015ec <add_tone>:
uint32_t get_counter () {
	return 2;
}

// Add a tone to the tones array
uint8_t add_tone (int note, uint8_t velocity) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	70fb      	strb	r3, [r7, #3]
	//mainprintf("\n\r npte" + note);

	duration = hertz_to_duration(notes[note]);
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <add_tone+0x60>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	f7ff ffc6 	bl	8001598 <hertz_to_duration>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <add_tone+0x64>)
 8001612:	601a      	str	r2, [r3, #0]
//mainprintf("duration " + duration);
	tones[note_c].duration = duration;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <add_tone+0x64>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <add_tone+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b291      	uxth	r1, r2
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <add_tone+0x6c>)
 8001620:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

	tones[note_c].power = velocity * 40;
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <add_tone+0x68>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4611      	mov	r1, r2
 800162e:	0089      	lsls	r1, r1, #2
 8001630:	440a      	add	r2, r1
 8001632:	00d2      	lsls	r2, r2, #3
 8001634:	b291      	uxth	r1, r2
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <add_tone+0x6c>)
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	460a      	mov	r2, r1
 800163e:	805a      	strh	r2, [r3, #2]

	return 1;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200114ac 	.word	0x200114ac
 8001650:	2001177c 	.word	0x2001177c
 8001654:	20011774 	.word	0x20011774
 8001658:	20011770 	.word	0x20011770

0800165c <remove_tone>:

// Remove a tone from the tones array
uint8_t remove_tone (uint8_t note) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	tones[note_c].duration = 0;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <remove_tone+0x34>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <remove_tone+0x38>)
 800166c:	2100      	movs	r1, #0
 800166e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	tones[note_c].power = 0;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <remove_tone+0x34>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <remove_tone+0x38>)
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	2200      	movs	r2, #0
 800167e:	805a      	strh	r2, [r3, #2]
	return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20011774 	.word	0x20011774
 8001694:	20011770 	.word	0x20011770

08001698 <play_tones>:


//plays current tone in note array
void play_tones () {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

	if ((get_millis() % tones[note_c].duration) < (tones[note_c].duration >> 1)){
 800169c:	f7ff fc2e 	bl	8000efc <get_millis>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <play_tones+0x50>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4911      	ldr	r1, [pc, #68]	; (80016ec <play_tones+0x54>)
 80016a8:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80016ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80016b0:	fb01 f202 	mul.w	r2, r1, r2
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <play_tones+0x50>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <play_tones+0x54>)
 80016bc:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
 80016c0:	0852      	lsrs	r2, r2, #1
 80016c2:	b292      	uxth	r2, r2
 80016c4:	4293      	cmp	r3, r2
 80016c6:	da09      	bge.n	80016dc <play_tones+0x44>
		DAC_Set_Value (tones[note_c].power);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <play_tones+0x50>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <play_tones+0x54>)
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	885b      	ldrh	r3, [r3, #2]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fbd7 	bl	8000e88 <DAC_Set_Value>
   	}
	else{
		DAC_Set_Value (0);
	}

}
 80016da:	e002      	b.n	80016e2 <play_tones+0x4a>
		DAC_Set_Value (0);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fbd3 	bl	8000e88 <DAC_Set_Value>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20011774 	.word	0x20011774
 80016ec:	20011770 	.word	0x20011770

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff fe5c 	bl	80013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f000 fbfb 	bl	8001f18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7ff fcc3 	bl	80010ac <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20011714 	.word	0x20011714
  ldr r2, =_sidata
 8001734:	08003bc0 	.word	0x08003bc0
  ldr r2, =_sbss
 8001738:	20011714 	.word	0x20011714
  ldr r4, =_ebss
 800173c:	20011794 	.word	0x20011794

08001740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_2_IRQHandler>
	...

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20011780 	.word	0x20011780

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200116ac 	.word	0x200116ac

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	; (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ffd8 	bl	80017a4 <__NVIC_EnableIRQ>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e014      	b.n	8001838 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	791b      	ldrb	r3, [r3, #4]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fab8 	bl	8000d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	795b      	ldrb	r3, [r3, #5]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_DAC_Start+0x16>
 8001852:	2302      	movs	r3, #2
 8001854:	e03b      	b.n	80018ce <HAL_DAC_Start+0x8e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2201      	movs	r2, #1
 800185a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	2201      	movs	r2, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10f      	bne.n	80018a0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800188a:	2b04      	cmp	r3, #4
 800188c:	d118      	bne.n	80018c0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	e00f      	b.n	80018c0 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018ae:	d107      	bne.n	80018c0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0202 	orr.w	r2, r2, #2
 80018be:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018da:	b480      	push	{r7}
 80018dc:	b087      	sub	sp, #28
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	3308      	adds	r3, #8
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e004      	b.n	800190e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	3314      	adds	r3, #20
 800190c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	461a      	mov	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	371c      	adds	r7, #28
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	795b      	ldrb	r3, [r3, #5]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_DAC_ConfigChannel+0x1c>
 800193c:	2302      	movs	r3, #2
 800193e:	e107      	b.n	8001b50 <HAL_DAC_ConfigChannel+0x22c>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2202      	movs	r2, #2
 800194a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d174      	bne.n	8001a3e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001954:	f7ff fef6 	bl	8001744 <HAL_GetTick>
 8001958:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d134      	bne.n	80019ca <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001960:	e011      	b.n	8001986 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001962:	f7ff feef 	bl	8001744 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d90a      	bls.n	8001986 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	f043 0208 	orr.w	r2, r3, #8
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2203      	movs	r2, #3
 8001980:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0e4      	b.n	8001b50 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e6      	bne.n	8001962 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff fee1 	bl	800175c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	6992      	ldr	r2, [r2, #24]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
 80019a4:	e01e      	b.n	80019e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019a6:	f7ff fecd 	bl	8001744 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d90a      	bls.n	80019ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f043 0208 	orr.w	r2, r3, #8
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2203      	movs	r2, #3
 80019c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0c2      	b.n	8001b50 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dbe8      	blt.n	80019a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fec1 	bl	800175c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	6992      	ldr	r2, [r2, #24]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	ea02 0103 	and.w	r1, r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	21ff      	movs	r1, #255	; 0xff
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	ea02 0103 	and.w	r1, r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	409a      	lsls	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d11d      	bne.n	8001a82 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f003 0310 	and.w	r3, r3, #16
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a88:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2207      	movs	r2, #7
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6819      	ldr	r1, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	22c0      	movs	r2, #192	; 0xc0
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43da      	mvns	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	e17f      	b.n	8001e68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8171 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d005      	beq.n	8001b98 <HAL_GPIO_Init+0x40>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d130      	bne.n	8001bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 0201 	and.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d118      	bne.n	8001c38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d017      	beq.n	8001c74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	6939      	ldr	r1, [r7, #16]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80ac 	beq.w	8001e62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	4a5e      	ldr	r2, [pc, #376]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6613      	str	r3, [r2, #96]	; 0x60
 8001d16:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x330>)
 8001d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d22:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x242>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x338>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x23e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x33c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x23a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x340>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x236>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x344>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x232>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x348>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x22e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x34c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x22a>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d82:	2307      	movs	r3, #7
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x244>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dac:	4937      	ldr	r1, [pc, #220]	; (8001e8c <HAL_GPIO_Init+0x334>)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_GPIO_Init+0x350>)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f47f ae78 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	48000800 	.word	0x48000800
 8001e98:	48000c00 	.word	0x48000c00
 8001e9c:	48001000 	.word	0x48001000
 8001ea0:	48001400 	.word	0x48001400
 8001ea4:	48001800 	.word	0x48001800
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec8:	e002      	b.n	8001ed0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fa44 	bl	8000388 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010400 	.word	0x40010400

08001f0c <__errno>:
 8001f0c:	4b01      	ldr	r3, [pc, #4]	; (8001f14 <__errno+0x8>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200116b0 	.word	0x200116b0

08001f18 <__libc_init_array>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	4d0d      	ldr	r5, [pc, #52]	; (8001f50 <__libc_init_array+0x38>)
 8001f1c:	4c0d      	ldr	r4, [pc, #52]	; (8001f54 <__libc_init_array+0x3c>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	2600      	movs	r6, #0
 8001f24:	42a6      	cmp	r6, r4
 8001f26:	d109      	bne.n	8001f3c <__libc_init_array+0x24>
 8001f28:	4d0b      	ldr	r5, [pc, #44]	; (8001f58 <__libc_init_array+0x40>)
 8001f2a:	4c0c      	ldr	r4, [pc, #48]	; (8001f5c <__libc_init_array+0x44>)
 8001f2c:	f001 f998 	bl	8003260 <_init>
 8001f30:	1b64      	subs	r4, r4, r5
 8001f32:	10a4      	asrs	r4, r4, #2
 8001f34:	2600      	movs	r6, #0
 8001f36:	42a6      	cmp	r6, r4
 8001f38:	d105      	bne.n	8001f46 <__libc_init_array+0x2e>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f40:	4798      	blx	r3
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7ee      	b.n	8001f24 <__libc_init_array+0xc>
 8001f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4a:	4798      	blx	r3
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	e7f2      	b.n	8001f36 <__libc_init_array+0x1e>
 8001f50:	08003bb8 	.word	0x08003bb8
 8001f54:	08003bb8 	.word	0x08003bb8
 8001f58:	08003bb8 	.word	0x08003bb8
 8001f5c:	08003bbc 	.word	0x08003bbc

08001f60 <memset>:
 8001f60:	4402      	add	r2, r0
 8001f62:	4603      	mov	r3, r0
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d100      	bne.n	8001f6a <memset+0xa>
 8001f68:	4770      	bx	lr
 8001f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6e:	e7f9      	b.n	8001f64 <memset+0x4>

08001f70 <_perror_r>:
 8001f70:	6983      	ldr	r3, [r0, #24]
 8001f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f74:	68c4      	ldr	r4, [r0, #12]
 8001f76:	4605      	mov	r5, r0
 8001f78:	460e      	mov	r6, r1
 8001f7a:	b90b      	cbnz	r3, 8001f80 <_perror_r+0x10>
 8001f7c:	f000 fc0c 	bl	8002798 <__sinit>
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <_perror_r+0x120>)
 8001f82:	429c      	cmp	r4, r3
 8001f84:	d132      	bne.n	8001fec <_perror_r+0x7c>
 8001f86:	686c      	ldr	r4, [r5, #4]
 8001f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f8a:	07d8      	lsls	r0, r3, #31
 8001f8c:	d405      	bmi.n	8001f9a <_perror_r+0x2a>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	0599      	lsls	r1, r3, #22
 8001f92:	d402      	bmi.n	8001f9a <_perror_r+0x2a>
 8001f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f96:	f000 fc9d 	bl	80028d4 <__retarget_lock_acquire_recursive>
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f000 fb29 	bl	80025f4 <_fflush_r>
 8001fa2:	bb6e      	cbnz	r6, 8002000 <_perror_r+0x90>
 8001fa4:	6829      	ldr	r1, [r5, #0]
 8001fa6:	ab01      	add	r3, sp, #4
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4628      	mov	r0, r5
 8001fac:	f000 f882 	bl	80020b4 <_strerror_r>
 8001fb0:	4607      	mov	r7, r0
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d14f      	bne.n	8002056 <_perror_r+0xe6>
 8001fb6:	4837      	ldr	r0, [pc, #220]	; (8002094 <_perror_r+0x124>)
 8001fb8:	4f36      	ldr	r7, [pc, #216]	; (8002094 <_perror_r+0x124>)
 8001fba:	f7fe f913 	bl	80001e4 <strlen>
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	b156      	cbz	r6, 8001fd8 <_perror_r+0x68>
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 fb52 	bl	800266c <fileno>
 8001fc8:	4633      	mov	r3, r6
 8001fca:	4601      	mov	r1, r0
 8001fcc:	463a      	mov	r2, r7
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 fa78 	bl	80024c4 <_write_r>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	da51      	bge.n	800207c <_perror_r+0x10c>
 8001fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fdc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe2:	07d2      	lsls	r2, r2, #31
 8001fe4:	81a3      	strh	r3, [r4, #12]
 8001fe6:	d54c      	bpl.n	8002082 <_perror_r+0x112>
 8001fe8:	b003      	add	sp, #12
 8001fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <_perror_r+0x128>)
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	d101      	bne.n	8001ff6 <_perror_r+0x86>
 8001ff2:	68ac      	ldr	r4, [r5, #8]
 8001ff4:	e7c8      	b.n	8001f88 <_perror_r+0x18>
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <_perror_r+0x12c>)
 8001ff8:	429c      	cmp	r4, r3
 8001ffa:	bf08      	it	eq
 8001ffc:	68ec      	ldreq	r4, [r5, #12]
 8001ffe:	e7c3      	b.n	8001f88 <_perror_r+0x18>
 8002000:	7833      	ldrb	r3, [r6, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ce      	beq.n	8001fa4 <_perror_r+0x34>
 8002006:	4630      	mov	r0, r6
 8002008:	f7fe f8ec 	bl	80001e4 <strlen>
 800200c:	4607      	mov	r7, r0
 800200e:	b157      	cbz	r7, 8002026 <_perror_r+0xb6>
 8002010:	4620      	mov	r0, r4
 8002012:	f000 fb2b 	bl	800266c <fileno>
 8002016:	463b      	mov	r3, r7
 8002018:	4601      	mov	r1, r0
 800201a:	4632      	mov	r2, r6
 800201c:	4628      	mov	r0, r5
 800201e:	f000 fa51 	bl	80024c4 <_write_r>
 8002022:	2800      	cmp	r0, #0
 8002024:	da14      	bge.n	8002050 <_perror_r+0xe0>
 8002026:	481e      	ldr	r0, [pc, #120]	; (80020a0 <_perror_r+0x130>)
 8002028:	4f1d      	ldr	r7, [pc, #116]	; (80020a0 <_perror_r+0x130>)
 800202a:	f7fe f8db 	bl	80001e4 <strlen>
 800202e:	4606      	mov	r6, r0
 8002030:	2e00      	cmp	r6, #0
 8002032:	d0b7      	beq.n	8001fa4 <_perror_r+0x34>
 8002034:	4620      	mov	r0, r4
 8002036:	f000 fb19 	bl	800266c <fileno>
 800203a:	4633      	mov	r3, r6
 800203c:	4601      	mov	r1, r0
 800203e:	463a      	mov	r2, r7
 8002040:	4628      	mov	r0, r5
 8002042:	f000 fa3f 	bl	80024c4 <_write_r>
 8002046:	2800      	cmp	r0, #0
 8002048:	dbac      	blt.n	8001fa4 <_perror_r+0x34>
 800204a:	1a36      	subs	r6, r6, r0
 800204c:	4407      	add	r7, r0
 800204e:	e7ef      	b.n	8002030 <_perror_r+0xc0>
 8002050:	1a3f      	subs	r7, r7, r0
 8002052:	4406      	add	r6, r0
 8002054:	e7db      	b.n	800200e <_perror_r+0x9e>
 8002056:	f7fe f8c5 	bl	80001e4 <strlen>
 800205a:	4606      	mov	r6, r0
 800205c:	2e00      	cmp	r6, #0
 800205e:	d0aa      	beq.n	8001fb6 <_perror_r+0x46>
 8002060:	4620      	mov	r0, r4
 8002062:	f000 fb03 	bl	800266c <fileno>
 8002066:	4633      	mov	r3, r6
 8002068:	4601      	mov	r1, r0
 800206a:	463a      	mov	r2, r7
 800206c:	4628      	mov	r0, r5
 800206e:	f000 fa29 	bl	80024c4 <_write_r>
 8002072:	2800      	cmp	r0, #0
 8002074:	db9f      	blt.n	8001fb6 <_perror_r+0x46>
 8002076:	1a36      	subs	r6, r6, r0
 8002078:	4407      	add	r7, r0
 800207a:	e7ef      	b.n	800205c <_perror_r+0xec>
 800207c:	1a36      	subs	r6, r6, r0
 800207e:	4407      	add	r7, r0
 8002080:	e79e      	b.n	8001fc0 <_perror_r+0x50>
 8002082:	059b      	lsls	r3, r3, #22
 8002084:	d4b0      	bmi.n	8001fe8 <_perror_r+0x78>
 8002086:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002088:	f000 fc25 	bl	80028d6 <__retarget_lock_release_recursive>
 800208c:	e7ac      	b.n	8001fe8 <_perror_r+0x78>
 800208e:	bf00      	nop
 8002090:	08003b44 	.word	0x08003b44
 8002094:	0800348b 	.word	0x0800348b
 8002098:	08003b64 	.word	0x08003b64
 800209c:	08003b24 	.word	0x08003b24
 80020a0:	08003488 	.word	0x08003488

080020a4 <perror>:
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <perror+0xc>)
 80020a6:	4601      	mov	r1, r0
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	f7ff bf61 	b.w	8001f70 <_perror_r>
 80020ae:	bf00      	nop
 80020b0:	200116b0 	.word	0x200116b0

080020b4 <_strerror_r>:
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	288e      	cmp	r0, #142	; 0x8e
 80020be:	f200 8130 	bhi.w	8002322 <_strerror_r+0x26e>
 80020c2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80020c6:	0139      	.short	0x0139
 80020c8:	0092008f 	.word	0x0092008f
 80020cc:	00960094 	.word	0x00960094
 80020d0:	009a0098 	.word	0x009a0098
 80020d4:	009e009c 	.word	0x009e009c
 80020d8:	00a400a2 	.word	0x00a400a2
 80020dc:	00aa00a8 	.word	0x00aa00a8
 80020e0:	00ae00ac 	.word	0x00ae00ac
 80020e4:	00b0012e 	.word	0x00b0012e
 80020e8:	00b400b2 	.word	0x00b400b2
 80020ec:	00b800b6 	.word	0x00b800b6
 80020f0:	00c000be 	.word	0x00c000be
 80020f4:	00c800c6 	.word	0x00c800c6
 80020f8:	00cc00ca 	.word	0x00cc00ca
 80020fc:	00d200ce 	.word	0x00d200ce
 8002100:	00d800d6 	.word	0x00d800d6
 8002104:	00dc00da 	.word	0x00dc00da
 8002108:	00e000de 	.word	0x00e000de
 800210c:	00e400e2 	.word	0x00e400e2
 8002110:	012e012e 	.word	0x012e012e
 8002114:	012e012e 	.word	0x012e012e
 8002118:	012e012e 	.word	0x012e012e
 800211c:	012e012e 	.word	0x012e012e
 8002120:	00ec00e8 	.word	0x00ec00e8
 8002124:	012e012e 	.word	0x012e012e
 8002128:	012e012e 	.word	0x012e012e
 800212c:	012e012e 	.word	0x012e012e
 8002130:	012e012e 	.word	0x012e012e
 8002134:	012e012e 	.word	0x012e012e
 8002138:	012e012e 	.word	0x012e012e
 800213c:	00ee012e 	.word	0x00ee012e
 8002140:	00f00108 	.word	0x00f00108
 8002144:	012e00f2 	.word	0x012e00f2
 8002148:	012e012e 	.word	0x012e012e
 800214c:	012e00f4 	.word	0x012e00f4
 8002150:	012e012e 	.word	0x012e012e
 8002154:	012e00f6 	.word	0x012e00f6
 8002158:	00fa012e 	.word	0x00fa012e
 800215c:	012e012e 	.word	0x012e012e
 8002160:	012e00fc 	.word	0x012e00fc
 8002164:	012e012e 	.word	0x012e012e
 8002168:	012e012e 	.word	0x012e012e
 800216c:	012e012e 	.word	0x012e012e
 8002170:	012e012e 	.word	0x012e012e
 8002174:	00fe012e 	.word	0x00fe012e
 8002178:	0100012e 	.word	0x0100012e
 800217c:	01040102 	.word	0x01040102
 8002180:	012e012e 	.word	0x012e012e
 8002184:	012e0126 	.word	0x012e0126
 8002188:	012e012e 	.word	0x012e012e
 800218c:	012e012e 	.word	0x012e012e
 8002190:	012e012e 	.word	0x012e012e
 8002194:	0114012e 	.word	0x0114012e
 8002198:	010a0106 	.word	0x010a0106
 800219c:	010e010c 	.word	0x010e010c
 80021a0:	012e0110 	.word	0x012e0110
 80021a4:	01160112 	.word	0x01160112
 80021a8:	00ea011a 	.word	0x00ea011a
 80021ac:	012c00c2 	.word	0x012c00c2
 80021b0:	00d000ba 	.word	0x00d000ba
 80021b4:	00a000bc 	.word	0x00a000bc
 80021b8:	012a00a6 	.word	0x012a00a6
 80021bc:	012e00f8 	.word	0x012e00f8
 80021c0:	00c40118 	.word	0x00c40118
 80021c4:	011c011e 	.word	0x011c011e
 80021c8:	012e012e 	.word	0x012e012e
 80021cc:	012e012e 	.word	0x012e012e
 80021d0:	00d4012e 	.word	0x00d4012e
 80021d4:	012e012e 	.word	0x012e012e
 80021d8:	00e6012e 	.word	0x00e6012e
 80021dc:	01200128 	.word	0x01200128
 80021e0:	01240122 	.word	0x01240122
 80021e4:	4b55      	ldr	r3, [pc, #340]	; (800233c <_strerror_r+0x288>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	4b55      	ldr	r3, [pc, #340]	; (8002340 <_strerror_r+0x28c>)
 80021ec:	e7fb      	b.n	80021e6 <_strerror_r+0x132>
 80021ee:	4b55      	ldr	r3, [pc, #340]	; (8002344 <_strerror_r+0x290>)
 80021f0:	e7f9      	b.n	80021e6 <_strerror_r+0x132>
 80021f2:	4b55      	ldr	r3, [pc, #340]	; (8002348 <_strerror_r+0x294>)
 80021f4:	e7f7      	b.n	80021e6 <_strerror_r+0x132>
 80021f6:	4b55      	ldr	r3, [pc, #340]	; (800234c <_strerror_r+0x298>)
 80021f8:	e7f5      	b.n	80021e6 <_strerror_r+0x132>
 80021fa:	4b55      	ldr	r3, [pc, #340]	; (8002350 <_strerror_r+0x29c>)
 80021fc:	e7f3      	b.n	80021e6 <_strerror_r+0x132>
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <_strerror_r+0x2a0>)
 8002200:	e7f1      	b.n	80021e6 <_strerror_r+0x132>
 8002202:	4b55      	ldr	r3, [pc, #340]	; (8002358 <_strerror_r+0x2a4>)
 8002204:	e7ef      	b.n	80021e6 <_strerror_r+0x132>
 8002206:	4b55      	ldr	r3, [pc, #340]	; (800235c <_strerror_r+0x2a8>)
 8002208:	e7ed      	b.n	80021e6 <_strerror_r+0x132>
 800220a:	4b55      	ldr	r3, [pc, #340]	; (8002360 <_strerror_r+0x2ac>)
 800220c:	e7eb      	b.n	80021e6 <_strerror_r+0x132>
 800220e:	4b55      	ldr	r3, [pc, #340]	; (8002364 <_strerror_r+0x2b0>)
 8002210:	e7e9      	b.n	80021e6 <_strerror_r+0x132>
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <_strerror_r+0x2b4>)
 8002214:	e7e7      	b.n	80021e6 <_strerror_r+0x132>
 8002216:	4b55      	ldr	r3, [pc, #340]	; (800236c <_strerror_r+0x2b8>)
 8002218:	e7e5      	b.n	80021e6 <_strerror_r+0x132>
 800221a:	4b55      	ldr	r3, [pc, #340]	; (8002370 <_strerror_r+0x2bc>)
 800221c:	e7e3      	b.n	80021e6 <_strerror_r+0x132>
 800221e:	4b55      	ldr	r3, [pc, #340]	; (8002374 <_strerror_r+0x2c0>)
 8002220:	e7e1      	b.n	80021e6 <_strerror_r+0x132>
 8002222:	4b55      	ldr	r3, [pc, #340]	; (8002378 <_strerror_r+0x2c4>)
 8002224:	e7df      	b.n	80021e6 <_strerror_r+0x132>
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <_strerror_r+0x2c8>)
 8002228:	e7dd      	b.n	80021e6 <_strerror_r+0x132>
 800222a:	4b55      	ldr	r3, [pc, #340]	; (8002380 <_strerror_r+0x2cc>)
 800222c:	e7db      	b.n	80021e6 <_strerror_r+0x132>
 800222e:	4b55      	ldr	r3, [pc, #340]	; (8002384 <_strerror_r+0x2d0>)
 8002230:	e7d9      	b.n	80021e6 <_strerror_r+0x132>
 8002232:	4b55      	ldr	r3, [pc, #340]	; (8002388 <_strerror_r+0x2d4>)
 8002234:	e7d7      	b.n	80021e6 <_strerror_r+0x132>
 8002236:	4b55      	ldr	r3, [pc, #340]	; (800238c <_strerror_r+0x2d8>)
 8002238:	e7d5      	b.n	80021e6 <_strerror_r+0x132>
 800223a:	4b55      	ldr	r3, [pc, #340]	; (8002390 <_strerror_r+0x2dc>)
 800223c:	e7d3      	b.n	80021e6 <_strerror_r+0x132>
 800223e:	4b55      	ldr	r3, [pc, #340]	; (8002394 <_strerror_r+0x2e0>)
 8002240:	e7d1      	b.n	80021e6 <_strerror_r+0x132>
 8002242:	4b55      	ldr	r3, [pc, #340]	; (8002398 <_strerror_r+0x2e4>)
 8002244:	e7cf      	b.n	80021e6 <_strerror_r+0x132>
 8002246:	4b55      	ldr	r3, [pc, #340]	; (800239c <_strerror_r+0x2e8>)
 8002248:	e7cd      	b.n	80021e6 <_strerror_r+0x132>
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <_strerror_r+0x2ec>)
 800224c:	e7cb      	b.n	80021e6 <_strerror_r+0x132>
 800224e:	4b55      	ldr	r3, [pc, #340]	; (80023a4 <_strerror_r+0x2f0>)
 8002250:	e7c9      	b.n	80021e6 <_strerror_r+0x132>
 8002252:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <_strerror_r+0x2f4>)
 8002254:	e7c7      	b.n	80021e6 <_strerror_r+0x132>
 8002256:	4b55      	ldr	r3, [pc, #340]	; (80023ac <_strerror_r+0x2f8>)
 8002258:	e7c5      	b.n	80021e6 <_strerror_r+0x132>
 800225a:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <_strerror_r+0x2fc>)
 800225c:	e7c3      	b.n	80021e6 <_strerror_r+0x132>
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <_strerror_r+0x300>)
 8002260:	e7c1      	b.n	80021e6 <_strerror_r+0x132>
 8002262:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <_strerror_r+0x304>)
 8002264:	e7bf      	b.n	80021e6 <_strerror_r+0x132>
 8002266:	4b55      	ldr	r3, [pc, #340]	; (80023bc <_strerror_r+0x308>)
 8002268:	e7bd      	b.n	80021e6 <_strerror_r+0x132>
 800226a:	4b55      	ldr	r3, [pc, #340]	; (80023c0 <_strerror_r+0x30c>)
 800226c:	e7bb      	b.n	80021e6 <_strerror_r+0x132>
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <_strerror_r+0x310>)
 8002270:	e7b9      	b.n	80021e6 <_strerror_r+0x132>
 8002272:	4b55      	ldr	r3, [pc, #340]	; (80023c8 <_strerror_r+0x314>)
 8002274:	e7b7      	b.n	80021e6 <_strerror_r+0x132>
 8002276:	4b55      	ldr	r3, [pc, #340]	; (80023cc <_strerror_r+0x318>)
 8002278:	e7b5      	b.n	80021e6 <_strerror_r+0x132>
 800227a:	4b55      	ldr	r3, [pc, #340]	; (80023d0 <_strerror_r+0x31c>)
 800227c:	e7b3      	b.n	80021e6 <_strerror_r+0x132>
 800227e:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <_strerror_r+0x320>)
 8002280:	e7b1      	b.n	80021e6 <_strerror_r+0x132>
 8002282:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <_strerror_r+0x324>)
 8002284:	e7af      	b.n	80021e6 <_strerror_r+0x132>
 8002286:	4b55      	ldr	r3, [pc, #340]	; (80023dc <_strerror_r+0x328>)
 8002288:	e7ad      	b.n	80021e6 <_strerror_r+0x132>
 800228a:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <_strerror_r+0x32c>)
 800228c:	e7ab      	b.n	80021e6 <_strerror_r+0x132>
 800228e:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <_strerror_r+0x330>)
 8002290:	e7a9      	b.n	80021e6 <_strerror_r+0x132>
 8002292:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <_strerror_r+0x334>)
 8002294:	e7a7      	b.n	80021e6 <_strerror_r+0x132>
 8002296:	4b55      	ldr	r3, [pc, #340]	; (80023ec <_strerror_r+0x338>)
 8002298:	e7a5      	b.n	80021e6 <_strerror_r+0x132>
 800229a:	4b55      	ldr	r3, [pc, #340]	; (80023f0 <_strerror_r+0x33c>)
 800229c:	e7a3      	b.n	80021e6 <_strerror_r+0x132>
 800229e:	4b55      	ldr	r3, [pc, #340]	; (80023f4 <_strerror_r+0x340>)
 80022a0:	e7a1      	b.n	80021e6 <_strerror_r+0x132>
 80022a2:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <_strerror_r+0x344>)
 80022a4:	e79f      	b.n	80021e6 <_strerror_r+0x132>
 80022a6:	4b55      	ldr	r3, [pc, #340]	; (80023fc <_strerror_r+0x348>)
 80022a8:	e79d      	b.n	80021e6 <_strerror_r+0x132>
 80022aa:	4b55      	ldr	r3, [pc, #340]	; (8002400 <_strerror_r+0x34c>)
 80022ac:	e79b      	b.n	80021e6 <_strerror_r+0x132>
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <_strerror_r+0x350>)
 80022b0:	e799      	b.n	80021e6 <_strerror_r+0x132>
 80022b2:	4b55      	ldr	r3, [pc, #340]	; (8002408 <_strerror_r+0x354>)
 80022b4:	e797      	b.n	80021e6 <_strerror_r+0x132>
 80022b6:	4b55      	ldr	r3, [pc, #340]	; (800240c <_strerror_r+0x358>)
 80022b8:	e795      	b.n	80021e6 <_strerror_r+0x132>
 80022ba:	4b55      	ldr	r3, [pc, #340]	; (8002410 <_strerror_r+0x35c>)
 80022bc:	e793      	b.n	80021e6 <_strerror_r+0x132>
 80022be:	4b55      	ldr	r3, [pc, #340]	; (8002414 <_strerror_r+0x360>)
 80022c0:	e791      	b.n	80021e6 <_strerror_r+0x132>
 80022c2:	4b55      	ldr	r3, [pc, #340]	; (8002418 <_strerror_r+0x364>)
 80022c4:	e78f      	b.n	80021e6 <_strerror_r+0x132>
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <_strerror_r+0x368>)
 80022c8:	e78d      	b.n	80021e6 <_strerror_r+0x132>
 80022ca:	4b55      	ldr	r3, [pc, #340]	; (8002420 <_strerror_r+0x36c>)
 80022cc:	e78b      	b.n	80021e6 <_strerror_r+0x132>
 80022ce:	4b55      	ldr	r3, [pc, #340]	; (8002424 <_strerror_r+0x370>)
 80022d0:	e789      	b.n	80021e6 <_strerror_r+0x132>
 80022d2:	4b55      	ldr	r3, [pc, #340]	; (8002428 <_strerror_r+0x374>)
 80022d4:	e787      	b.n	80021e6 <_strerror_r+0x132>
 80022d6:	4b55      	ldr	r3, [pc, #340]	; (800242c <_strerror_r+0x378>)
 80022d8:	e785      	b.n	80021e6 <_strerror_r+0x132>
 80022da:	4b55      	ldr	r3, [pc, #340]	; (8002430 <_strerror_r+0x37c>)
 80022dc:	e783      	b.n	80021e6 <_strerror_r+0x132>
 80022de:	4b55      	ldr	r3, [pc, #340]	; (8002434 <_strerror_r+0x380>)
 80022e0:	e781      	b.n	80021e6 <_strerror_r+0x132>
 80022e2:	4b55      	ldr	r3, [pc, #340]	; (8002438 <_strerror_r+0x384>)
 80022e4:	e77f      	b.n	80021e6 <_strerror_r+0x132>
 80022e6:	4b55      	ldr	r3, [pc, #340]	; (800243c <_strerror_r+0x388>)
 80022e8:	e77d      	b.n	80021e6 <_strerror_r+0x132>
 80022ea:	4b55      	ldr	r3, [pc, #340]	; (8002440 <_strerror_r+0x38c>)
 80022ec:	e77b      	b.n	80021e6 <_strerror_r+0x132>
 80022ee:	4b55      	ldr	r3, [pc, #340]	; (8002444 <_strerror_r+0x390>)
 80022f0:	e779      	b.n	80021e6 <_strerror_r+0x132>
 80022f2:	4b55      	ldr	r3, [pc, #340]	; (8002448 <_strerror_r+0x394>)
 80022f4:	e777      	b.n	80021e6 <_strerror_r+0x132>
 80022f6:	4b55      	ldr	r3, [pc, #340]	; (800244c <_strerror_r+0x398>)
 80022f8:	e775      	b.n	80021e6 <_strerror_r+0x132>
 80022fa:	4b55      	ldr	r3, [pc, #340]	; (8002450 <_strerror_r+0x39c>)
 80022fc:	e773      	b.n	80021e6 <_strerror_r+0x132>
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <_strerror_r+0x3a0>)
 8002300:	e771      	b.n	80021e6 <_strerror_r+0x132>
 8002302:	4b55      	ldr	r3, [pc, #340]	; (8002458 <_strerror_r+0x3a4>)
 8002304:	e76f      	b.n	80021e6 <_strerror_r+0x132>
 8002306:	4b55      	ldr	r3, [pc, #340]	; (800245c <_strerror_r+0x3a8>)
 8002308:	e76d      	b.n	80021e6 <_strerror_r+0x132>
 800230a:	4b55      	ldr	r3, [pc, #340]	; (8002460 <_strerror_r+0x3ac>)
 800230c:	e76b      	b.n	80021e6 <_strerror_r+0x132>
 800230e:	4b55      	ldr	r3, [pc, #340]	; (8002464 <_strerror_r+0x3b0>)
 8002310:	e769      	b.n	80021e6 <_strerror_r+0x132>
 8002312:	4b55      	ldr	r3, [pc, #340]	; (8002468 <_strerror_r+0x3b4>)
 8002314:	e767      	b.n	80021e6 <_strerror_r+0x132>
 8002316:	4b55      	ldr	r3, [pc, #340]	; (800246c <_strerror_r+0x3b8>)
 8002318:	e765      	b.n	80021e6 <_strerror_r+0x132>
 800231a:	4b55      	ldr	r3, [pc, #340]	; (8002470 <_strerror_r+0x3bc>)
 800231c:	e763      	b.n	80021e6 <_strerror_r+0x132>
 800231e:	4b55      	ldr	r3, [pc, #340]	; (8002474 <_strerror_r+0x3c0>)
 8002320:	e761      	b.n	80021e6 <_strerror_r+0x132>
 8002322:	2b00      	cmp	r3, #0
 8002324:	bf14      	ite	ne
 8002326:	461a      	movne	r2, r3
 8002328:	4622      	moveq	r2, r4
 800232a:	f000 f8a9 	bl	8002480 <_user_strerror>
 800232e:	4b52      	ldr	r3, [pc, #328]	; (8002478 <_strerror_r+0x3c4>)
 8002330:	2800      	cmp	r0, #0
 8002332:	bf18      	it	ne
 8002334:	4603      	movne	r3, r0
 8002336:	e756      	b.n	80021e6 <_strerror_r+0x132>
 8002338:	4b50      	ldr	r3, [pc, #320]	; (800247c <_strerror_r+0x3c8>)
 800233a:	e754      	b.n	80021e6 <_strerror_r+0x132>
 800233c:	0800348d 	.word	0x0800348d
 8002340:	08003497 	.word	0x08003497
 8002344:	080034b1 	.word	0x080034b1
 8002348:	080034c1 	.word	0x080034c1
 800234c:	080034d9 	.word	0x080034d9
 8002350:	080034e3 	.word	0x080034e3
 8002354:	080034fd 	.word	0x080034fd
 8002358:	0800350f 	.word	0x0800350f
 800235c:	08003521 	.word	0x08003521
 8002360:	0800353a 	.word	0x0800353a
 8002364:	0800354a 	.word	0x0800354a
 8002368:	08003556 	.word	0x08003556
 800236c:	08003573 	.word	0x08003573
 8002370:	08003585 	.word	0x08003585
 8002374:	08003596 	.word	0x08003596
 8002378:	080035a8 	.word	0x080035a8
 800237c:	080035b4 	.word	0x080035b4
 8002380:	080035cc 	.word	0x080035cc
 8002384:	080035d8 	.word	0x080035d8
 8002388:	080035ea 	.word	0x080035ea
 800238c:	080035f9 	.word	0x080035f9
 8002390:	08003609 	.word	0x08003609
 8002394:	08003616 	.word	0x08003616
 8002398:	08003635 	.word	0x08003635
 800239c:	08003644 	.word	0x08003644
 80023a0:	08003655 	.word	0x08003655
 80023a4:	08003679 	.word	0x08003679
 80023a8:	08003697 	.word	0x08003697
 80023ac:	080036b5 	.word	0x080036b5
 80023b0:	080036d5 	.word	0x080036d5
 80023b4:	080036ec 	.word	0x080036ec
 80023b8:	080036fb 	.word	0x080036fb
 80023bc:	0800370a 	.word	0x0800370a
 80023c0:	0800371e 	.word	0x0800371e
 80023c4:	08003736 	.word	0x08003736
 80023c8:	08003744 	.word	0x08003744
 80023cc:	08003751 	.word	0x08003751
 80023d0:	08003767 	.word	0x08003767
 80023d4:	08003776 	.word	0x08003776
 80023d8:	08003782 	.word	0x08003782
 80023dc:	080037b1 	.word	0x080037b1
 80023e0:	080037c2 	.word	0x080037c2
 80023e4:	080037dd 	.word	0x080037dd
 80023e8:	080037f0 	.word	0x080037f0
 80023ec:	08003806 	.word	0x08003806
 80023f0:	0800380f 	.word	0x0800380f
 80023f4:	08003826 	.word	0x08003826
 80023f8:	0800382e 	.word	0x0800382e
 80023fc:	0800383b 	.word	0x0800383b
 8002400:	08003850 	.word	0x08003850
 8002404:	08003864 	.word	0x08003864
 8002408:	0800387c 	.word	0x0800387c
 800240c:	0800388b 	.word	0x0800388b
 8002410:	0800389c 	.word	0x0800389c
 8002414:	080038af 	.word	0x080038af
 8002418:	080038bb 	.word	0x080038bb
 800241c:	080038d4 	.word	0x080038d4
 8002420:	080038e8 	.word	0x080038e8
 8002424:	08003903 	.word	0x08003903
 8002428:	0800391b 	.word	0x0800391b
 800242c:	08003935 	.word	0x08003935
 8002430:	0800393d 	.word	0x0800393d
 8002434:	0800396d 	.word	0x0800396d
 8002438:	0800398c 	.word	0x0800398c
 800243c:	080039ab 	.word	0x080039ab
 8002440:	080039c2 	.word	0x080039c2
 8002444:	080039d5 	.word	0x080039d5
 8002448:	080039ee 	.word	0x080039ee
 800244c:	08003a05 	.word	0x08003a05
 8002450:	08003a1b 	.word	0x08003a1b
 8002454:	08003a3c 	.word	0x08003a3c
 8002458:	08003a54 	.word	0x08003a54
 800245c:	08003a70 	.word	0x08003a70
 8002460:	08003a83 	.word	0x08003a83
 8002464:	08003a99 	.word	0x08003a99
 8002468:	08003aad 	.word	0x08003aad
 800246c:	08003acf 	.word	0x08003acf
 8002470:	08003af5 	.word	0x08003af5
 8002474:	08003b06 	.word	0x08003b06
 8002478:	0800348c 	.word	0x0800348c
 800247c:	08003b1b 	.word	0x08003b1b

08002480 <_user_strerror>:
 8002480:	2000      	movs	r0, #0
 8002482:	4770      	bx	lr

08002484 <_vsiprintf_r>:
 8002484:	b500      	push	{lr}
 8002486:	b09b      	sub	sp, #108	; 0x6c
 8002488:	9100      	str	r1, [sp, #0]
 800248a:	9104      	str	r1, [sp, #16]
 800248c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002490:	9105      	str	r1, [sp, #20]
 8002492:	9102      	str	r1, [sp, #8]
 8002494:	4905      	ldr	r1, [pc, #20]	; (80024ac <_vsiprintf_r+0x28>)
 8002496:	9103      	str	r1, [sp, #12]
 8002498:	4669      	mov	r1, sp
 800249a:	f000 fb59 	bl	8002b50 <_svfiprintf_r>
 800249e:	9b00      	ldr	r3, [sp, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	b01b      	add	sp, #108	; 0x6c
 80024a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024aa:	bf00      	nop
 80024ac:	ffff0208 	.word	0xffff0208

080024b0 <vsiprintf>:
 80024b0:	4613      	mov	r3, r2
 80024b2:	460a      	mov	r2, r1
 80024b4:	4601      	mov	r1, r0
 80024b6:	4802      	ldr	r0, [pc, #8]	; (80024c0 <vsiprintf+0x10>)
 80024b8:	6800      	ldr	r0, [r0, #0]
 80024ba:	f7ff bfe3 	b.w	8002484 <_vsiprintf_r>
 80024be:	bf00      	nop
 80024c0:	200116b0 	.word	0x200116b0

080024c4 <_write_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4d07      	ldr	r5, [pc, #28]	; (80024e4 <_write_r+0x20>)
 80024c8:	4604      	mov	r4, r0
 80024ca:	4608      	mov	r0, r1
 80024cc:	4611      	mov	r1, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	602a      	str	r2, [r5, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	f7fe ff00 	bl	80012d8 <_write>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_write_r+0x1e>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_write_r+0x1e>
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	20011790 	.word	0x20011790

080024e8 <__sflush_r>:
 80024e8:	898a      	ldrh	r2, [r1, #12]
 80024ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ee:	4605      	mov	r5, r0
 80024f0:	0710      	lsls	r0, r2, #28
 80024f2:	460c      	mov	r4, r1
 80024f4:	d458      	bmi.n	80025a8 <__sflush_r+0xc0>
 80024f6:	684b      	ldr	r3, [r1, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	dc05      	bgt.n	8002508 <__sflush_r+0x20>
 80024fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	dc02      	bgt.n	8002508 <__sflush_r+0x20>
 8002502:	2000      	movs	r0, #0
 8002504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800250a:	2e00      	cmp	r6, #0
 800250c:	d0f9      	beq.n	8002502 <__sflush_r+0x1a>
 800250e:	2300      	movs	r3, #0
 8002510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002514:	682f      	ldr	r7, [r5, #0]
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	d032      	beq.n	8002580 <__sflush_r+0x98>
 800251a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	075a      	lsls	r2, r3, #29
 8002520:	d505      	bpl.n	800252e <__sflush_r+0x46>
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	1ac0      	subs	r0, r0, r3
 8002526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002528:	b10b      	cbz	r3, 800252e <__sflush_r+0x46>
 800252a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252c:	1ac0      	subs	r0, r0, r3
 800252e:	2300      	movs	r3, #0
 8002530:	4602      	mov	r2, r0
 8002532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002534:	6a21      	ldr	r1, [r4, #32]
 8002536:	4628      	mov	r0, r5
 8002538:	47b0      	blx	r6
 800253a:	1c43      	adds	r3, r0, #1
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	d106      	bne.n	800254e <__sflush_r+0x66>
 8002540:	6829      	ldr	r1, [r5, #0]
 8002542:	291d      	cmp	r1, #29
 8002544:	d82c      	bhi.n	80025a0 <__sflush_r+0xb8>
 8002546:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <__sflush_r+0x108>)
 8002548:	40ca      	lsrs	r2, r1
 800254a:	07d6      	lsls	r6, r2, #31
 800254c:	d528      	bpl.n	80025a0 <__sflush_r+0xb8>
 800254e:	2200      	movs	r2, #0
 8002550:	6062      	str	r2, [r4, #4]
 8002552:	04d9      	lsls	r1, r3, #19
 8002554:	6922      	ldr	r2, [r4, #16]
 8002556:	6022      	str	r2, [r4, #0]
 8002558:	d504      	bpl.n	8002564 <__sflush_r+0x7c>
 800255a:	1c42      	adds	r2, r0, #1
 800255c:	d101      	bne.n	8002562 <__sflush_r+0x7a>
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	b903      	cbnz	r3, 8002564 <__sflush_r+0x7c>
 8002562:	6560      	str	r0, [r4, #84]	; 0x54
 8002564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002566:	602f      	str	r7, [r5, #0]
 8002568:	2900      	cmp	r1, #0
 800256a:	d0ca      	beq.n	8002502 <__sflush_r+0x1a>
 800256c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002570:	4299      	cmp	r1, r3
 8002572:	d002      	beq.n	800257a <__sflush_r+0x92>
 8002574:	4628      	mov	r0, r5
 8002576:	f000 f9af 	bl	80028d8 <_free_r>
 800257a:	2000      	movs	r0, #0
 800257c:	6360      	str	r0, [r4, #52]	; 0x34
 800257e:	e7c1      	b.n	8002504 <__sflush_r+0x1c>
 8002580:	6a21      	ldr	r1, [r4, #32]
 8002582:	2301      	movs	r3, #1
 8002584:	4628      	mov	r0, r5
 8002586:	47b0      	blx	r6
 8002588:	1c41      	adds	r1, r0, #1
 800258a:	d1c7      	bne.n	800251c <__sflush_r+0x34>
 800258c:	682b      	ldr	r3, [r5, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0c4      	beq.n	800251c <__sflush_r+0x34>
 8002592:	2b1d      	cmp	r3, #29
 8002594:	d001      	beq.n	800259a <__sflush_r+0xb2>
 8002596:	2b16      	cmp	r3, #22
 8002598:	d101      	bne.n	800259e <__sflush_r+0xb6>
 800259a:	602f      	str	r7, [r5, #0]
 800259c:	e7b1      	b.n	8002502 <__sflush_r+0x1a>
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	e7ad      	b.n	8002504 <__sflush_r+0x1c>
 80025a8:	690f      	ldr	r7, [r1, #16]
 80025aa:	2f00      	cmp	r7, #0
 80025ac:	d0a9      	beq.n	8002502 <__sflush_r+0x1a>
 80025ae:	0793      	lsls	r3, r2, #30
 80025b0:	680e      	ldr	r6, [r1, #0]
 80025b2:	bf08      	it	eq
 80025b4:	694b      	ldreq	r3, [r1, #20]
 80025b6:	600f      	str	r7, [r1, #0]
 80025b8:	bf18      	it	ne
 80025ba:	2300      	movne	r3, #0
 80025bc:	eba6 0807 	sub.w	r8, r6, r7
 80025c0:	608b      	str	r3, [r1, #8]
 80025c2:	f1b8 0f00 	cmp.w	r8, #0
 80025c6:	dd9c      	ble.n	8002502 <__sflush_r+0x1a>
 80025c8:	6a21      	ldr	r1, [r4, #32]
 80025ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025cc:	4643      	mov	r3, r8
 80025ce:	463a      	mov	r2, r7
 80025d0:	4628      	mov	r0, r5
 80025d2:	47b0      	blx	r6
 80025d4:	2800      	cmp	r0, #0
 80025d6:	dc06      	bgt.n	80025e6 <__sflush_r+0xfe>
 80025d8:	89a3      	ldrh	r3, [r4, #12]
 80025da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025de:	81a3      	strh	r3, [r4, #12]
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	e78e      	b.n	8002504 <__sflush_r+0x1c>
 80025e6:	4407      	add	r7, r0
 80025e8:	eba8 0800 	sub.w	r8, r8, r0
 80025ec:	e7e9      	b.n	80025c2 <__sflush_r+0xda>
 80025ee:	bf00      	nop
 80025f0:	20400001 	.word	0x20400001

080025f4 <_fflush_r>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	690b      	ldr	r3, [r1, #16]
 80025f8:	4605      	mov	r5, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	b913      	cbnz	r3, 8002604 <_fflush_r+0x10>
 80025fe:	2500      	movs	r5, #0
 8002600:	4628      	mov	r0, r5
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	b118      	cbz	r0, 800260e <_fflush_r+0x1a>
 8002606:	6983      	ldr	r3, [r0, #24]
 8002608:	b90b      	cbnz	r3, 800260e <_fflush_r+0x1a>
 800260a:	f000 f8c5 	bl	8002798 <__sinit>
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <_fflush_r+0x6c>)
 8002610:	429c      	cmp	r4, r3
 8002612:	d11b      	bne.n	800264c <_fflush_r+0x58>
 8002614:	686c      	ldr	r4, [r5, #4]
 8002616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ef      	beq.n	80025fe <_fflush_r+0xa>
 800261e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002620:	07d0      	lsls	r0, r2, #31
 8002622:	d404      	bmi.n	800262e <_fflush_r+0x3a>
 8002624:	0599      	lsls	r1, r3, #22
 8002626:	d402      	bmi.n	800262e <_fflush_r+0x3a>
 8002628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800262a:	f000 f953 	bl	80028d4 <__retarget_lock_acquire_recursive>
 800262e:	4628      	mov	r0, r5
 8002630:	4621      	mov	r1, r4
 8002632:	f7ff ff59 	bl	80024e8 <__sflush_r>
 8002636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002638:	07da      	lsls	r2, r3, #31
 800263a:	4605      	mov	r5, r0
 800263c:	d4e0      	bmi.n	8002600 <_fflush_r+0xc>
 800263e:	89a3      	ldrh	r3, [r4, #12]
 8002640:	059b      	lsls	r3, r3, #22
 8002642:	d4dd      	bmi.n	8002600 <_fflush_r+0xc>
 8002644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002646:	f000 f946 	bl	80028d6 <__retarget_lock_release_recursive>
 800264a:	e7d9      	b.n	8002600 <_fflush_r+0xc>
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <_fflush_r+0x70>)
 800264e:	429c      	cmp	r4, r3
 8002650:	d101      	bne.n	8002656 <_fflush_r+0x62>
 8002652:	68ac      	ldr	r4, [r5, #8]
 8002654:	e7df      	b.n	8002616 <_fflush_r+0x22>
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <_fflush_r+0x74>)
 8002658:	429c      	cmp	r4, r3
 800265a:	bf08      	it	eq
 800265c:	68ec      	ldreq	r4, [r5, #12]
 800265e:	e7da      	b.n	8002616 <_fflush_r+0x22>
 8002660:	08003b44 	.word	0x08003b44
 8002664:	08003b64 	.word	0x08003b64
 8002668:	08003b24 	.word	0x08003b24

0800266c <fileno>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	4e1a      	ldr	r6, [pc, #104]	; (80026d8 <fileno+0x6c>)
 8002670:	6835      	ldr	r5, [r6, #0]
 8002672:	4604      	mov	r4, r0
 8002674:	b125      	cbz	r5, 8002680 <fileno+0x14>
 8002676:	69ab      	ldr	r3, [r5, #24]
 8002678:	b913      	cbnz	r3, 8002680 <fileno+0x14>
 800267a:	4628      	mov	r0, r5
 800267c:	f000 f88c 	bl	8002798 <__sinit>
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <fileno+0x70>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d118      	bne.n	80026b8 <fileno+0x4c>
 8002686:	686c      	ldr	r4, [r5, #4]
 8002688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800268a:	07d8      	lsls	r0, r3, #31
 800268c:	d405      	bmi.n	800269a <fileno+0x2e>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	0599      	lsls	r1, r3, #22
 8002692:	d402      	bmi.n	800269a <fileno+0x2e>
 8002694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002696:	f000 f91d 	bl	80028d4 <__retarget_lock_acquire_recursive>
 800269a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800269e:	b1ab      	cbz	r3, 80026cc <fileno+0x60>
 80026a0:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80026a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026a6:	07d2      	lsls	r2, r2, #31
 80026a8:	d404      	bmi.n	80026b4 <fileno+0x48>
 80026aa:	059b      	lsls	r3, r3, #22
 80026ac:	d402      	bmi.n	80026b4 <fileno+0x48>
 80026ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026b0:	f000 f911 	bl	80028d6 <__retarget_lock_release_recursive>
 80026b4:	4628      	mov	r0, r5
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <fileno+0x74>)
 80026ba:	429c      	cmp	r4, r3
 80026bc:	d101      	bne.n	80026c2 <fileno+0x56>
 80026be:	68ac      	ldr	r4, [r5, #8]
 80026c0:	e7e2      	b.n	8002688 <fileno+0x1c>
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <fileno+0x78>)
 80026c4:	429c      	cmp	r4, r3
 80026c6:	bf08      	it	eq
 80026c8:	68ec      	ldreq	r4, [r5, #12]
 80026ca:	e7dd      	b.n	8002688 <fileno+0x1c>
 80026cc:	6832      	ldr	r2, [r6, #0]
 80026ce:	2109      	movs	r1, #9
 80026d0:	6011      	str	r1, [r2, #0]
 80026d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80026d6:	e7e5      	b.n	80026a4 <fileno+0x38>
 80026d8:	200116b0 	.word	0x200116b0
 80026dc:	08003b44 	.word	0x08003b44
 80026e0:	08003b64 	.word	0x08003b64
 80026e4:	08003b24 	.word	0x08003b24

080026e8 <std>:
 80026e8:	2300      	movs	r3, #0
 80026ea:	b510      	push	{r4, lr}
 80026ec:	4604      	mov	r4, r0
 80026ee:	e9c0 3300 	strd	r3, r3, [r0]
 80026f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026f6:	6083      	str	r3, [r0, #8]
 80026f8:	8181      	strh	r1, [r0, #12]
 80026fa:	6643      	str	r3, [r0, #100]	; 0x64
 80026fc:	81c2      	strh	r2, [r0, #14]
 80026fe:	6183      	str	r3, [r0, #24]
 8002700:	4619      	mov	r1, r3
 8002702:	2208      	movs	r2, #8
 8002704:	305c      	adds	r0, #92	; 0x5c
 8002706:	f7ff fc2b 	bl	8001f60 <memset>
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <std+0x38>)
 800270c:	6263      	str	r3, [r4, #36]	; 0x24
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <std+0x3c>)
 8002710:	62a3      	str	r3, [r4, #40]	; 0x28
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <std+0x40>)
 8002714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <std+0x44>)
 8002718:	6224      	str	r4, [r4, #32]
 800271a:	6323      	str	r3, [r4, #48]	; 0x30
 800271c:	bd10      	pop	{r4, pc}
 800271e:	bf00      	nop
 8002720:	08003099 	.word	0x08003099
 8002724:	080030bb 	.word	0x080030bb
 8002728:	080030f3 	.word	0x080030f3
 800272c:	08003117 	.word	0x08003117

08002730 <_cleanup_r>:
 8002730:	4901      	ldr	r1, [pc, #4]	; (8002738 <_cleanup_r+0x8>)
 8002732:	f000 b8af 	b.w	8002894 <_fwalk_reent>
 8002736:	bf00      	nop
 8002738:	080025f5 	.word	0x080025f5

0800273c <__sfmoreglue>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2268      	movs	r2, #104	; 0x68
 8002740:	1e4d      	subs	r5, r1, #1
 8002742:	4355      	muls	r5, r2
 8002744:	460e      	mov	r6, r1
 8002746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800274a:	f000 f931 	bl	80029b0 <_malloc_r>
 800274e:	4604      	mov	r4, r0
 8002750:	b140      	cbz	r0, 8002764 <__sfmoreglue+0x28>
 8002752:	2100      	movs	r1, #0
 8002754:	e9c0 1600 	strd	r1, r6, [r0]
 8002758:	300c      	adds	r0, #12
 800275a:	60a0      	str	r0, [r4, #8]
 800275c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002760:	f7ff fbfe 	bl	8001f60 <memset>
 8002764:	4620      	mov	r0, r4
 8002766:	bd70      	pop	{r4, r5, r6, pc}

08002768 <__sfp_lock_acquire>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__sfp_lock_acquire+0x8>)
 800276a:	f000 b8b3 	b.w	80028d4 <__retarget_lock_acquire_recursive>
 800276e:	bf00      	nop
 8002770:	20011785 	.word	0x20011785

08002774 <__sfp_lock_release>:
 8002774:	4801      	ldr	r0, [pc, #4]	; (800277c <__sfp_lock_release+0x8>)
 8002776:	f000 b8ae 	b.w	80028d6 <__retarget_lock_release_recursive>
 800277a:	bf00      	nop
 800277c:	20011785 	.word	0x20011785

08002780 <__sinit_lock_acquire>:
 8002780:	4801      	ldr	r0, [pc, #4]	; (8002788 <__sinit_lock_acquire+0x8>)
 8002782:	f000 b8a7 	b.w	80028d4 <__retarget_lock_acquire_recursive>
 8002786:	bf00      	nop
 8002788:	20011786 	.word	0x20011786

0800278c <__sinit_lock_release>:
 800278c:	4801      	ldr	r0, [pc, #4]	; (8002794 <__sinit_lock_release+0x8>)
 800278e:	f000 b8a2 	b.w	80028d6 <__retarget_lock_release_recursive>
 8002792:	bf00      	nop
 8002794:	20011786 	.word	0x20011786

08002798 <__sinit>:
 8002798:	b510      	push	{r4, lr}
 800279a:	4604      	mov	r4, r0
 800279c:	f7ff fff0 	bl	8002780 <__sinit_lock_acquire>
 80027a0:	69a3      	ldr	r3, [r4, #24]
 80027a2:	b11b      	cbz	r3, 80027ac <__sinit+0x14>
 80027a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a8:	f7ff bff0 	b.w	800278c <__sinit_lock_release>
 80027ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027b0:	6523      	str	r3, [r4, #80]	; 0x50
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <__sinit+0x68>)
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <__sinit+0x6c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	bf04      	itt	eq
 80027be:	2301      	moveq	r3, #1
 80027c0:	61a3      	streq	r3, [r4, #24]
 80027c2:	4620      	mov	r0, r4
 80027c4:	f000 f820 	bl	8002808 <__sfp>
 80027c8:	6060      	str	r0, [r4, #4]
 80027ca:	4620      	mov	r0, r4
 80027cc:	f000 f81c 	bl	8002808 <__sfp>
 80027d0:	60a0      	str	r0, [r4, #8]
 80027d2:	4620      	mov	r0, r4
 80027d4:	f000 f818 	bl	8002808 <__sfp>
 80027d8:	2200      	movs	r2, #0
 80027da:	60e0      	str	r0, [r4, #12]
 80027dc:	2104      	movs	r1, #4
 80027de:	6860      	ldr	r0, [r4, #4]
 80027e0:	f7ff ff82 	bl	80026e8 <std>
 80027e4:	68a0      	ldr	r0, [r4, #8]
 80027e6:	2201      	movs	r2, #1
 80027e8:	2109      	movs	r1, #9
 80027ea:	f7ff ff7d 	bl	80026e8 <std>
 80027ee:	68e0      	ldr	r0, [r4, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	2112      	movs	r1, #18
 80027f4:	f7ff ff78 	bl	80026e8 <std>
 80027f8:	2301      	movs	r3, #1
 80027fa:	61a3      	str	r3, [r4, #24]
 80027fc:	e7d2      	b.n	80027a4 <__sinit+0xc>
 80027fe:	bf00      	nop
 8002800:	08003484 	.word	0x08003484
 8002804:	08002731 	.word	0x08002731

08002808 <__sfp>:
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280a:	4607      	mov	r7, r0
 800280c:	f7ff ffac 	bl	8002768 <__sfp_lock_acquire>
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <__sfp+0x84>)
 8002812:	681e      	ldr	r6, [r3, #0]
 8002814:	69b3      	ldr	r3, [r6, #24]
 8002816:	b913      	cbnz	r3, 800281e <__sfp+0x16>
 8002818:	4630      	mov	r0, r6
 800281a:	f7ff ffbd 	bl	8002798 <__sinit>
 800281e:	3648      	adds	r6, #72	; 0x48
 8002820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002824:	3b01      	subs	r3, #1
 8002826:	d503      	bpl.n	8002830 <__sfp+0x28>
 8002828:	6833      	ldr	r3, [r6, #0]
 800282a:	b30b      	cbz	r3, 8002870 <__sfp+0x68>
 800282c:	6836      	ldr	r6, [r6, #0]
 800282e:	e7f7      	b.n	8002820 <__sfp+0x18>
 8002830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002834:	b9d5      	cbnz	r5, 800286c <__sfp+0x64>
 8002836:	4b16      	ldr	r3, [pc, #88]	; (8002890 <__sfp+0x88>)
 8002838:	60e3      	str	r3, [r4, #12]
 800283a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800283e:	6665      	str	r5, [r4, #100]	; 0x64
 8002840:	f000 f847 	bl	80028d2 <__retarget_lock_init_recursive>
 8002844:	f7ff ff96 	bl	8002774 <__sfp_lock_release>
 8002848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800284c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002850:	6025      	str	r5, [r4, #0]
 8002852:	61a5      	str	r5, [r4, #24]
 8002854:	2208      	movs	r2, #8
 8002856:	4629      	mov	r1, r5
 8002858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800285c:	f7ff fb80 	bl	8001f60 <memset>
 8002860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002868:	4620      	mov	r0, r4
 800286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286c:	3468      	adds	r4, #104	; 0x68
 800286e:	e7d9      	b.n	8002824 <__sfp+0x1c>
 8002870:	2104      	movs	r1, #4
 8002872:	4638      	mov	r0, r7
 8002874:	f7ff ff62 	bl	800273c <__sfmoreglue>
 8002878:	4604      	mov	r4, r0
 800287a:	6030      	str	r0, [r6, #0]
 800287c:	2800      	cmp	r0, #0
 800287e:	d1d5      	bne.n	800282c <__sfp+0x24>
 8002880:	f7ff ff78 	bl	8002774 <__sfp_lock_release>
 8002884:	230c      	movs	r3, #12
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	e7ee      	b.n	8002868 <__sfp+0x60>
 800288a:	bf00      	nop
 800288c:	08003484 	.word	0x08003484
 8002890:	ffff0001 	.word	0xffff0001

08002894 <_fwalk_reent>:
 8002894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002898:	4606      	mov	r6, r0
 800289a:	4688      	mov	r8, r1
 800289c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028a0:	2700      	movs	r7, #0
 80028a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028a6:	f1b9 0901 	subs.w	r9, r9, #1
 80028aa:	d505      	bpl.n	80028b8 <_fwalk_reent+0x24>
 80028ac:	6824      	ldr	r4, [r4, #0]
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	d1f7      	bne.n	80028a2 <_fwalk_reent+0xe>
 80028b2:	4638      	mov	r0, r7
 80028b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028b8:	89ab      	ldrh	r3, [r5, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d907      	bls.n	80028ce <_fwalk_reent+0x3a>
 80028be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028c2:	3301      	adds	r3, #1
 80028c4:	d003      	beq.n	80028ce <_fwalk_reent+0x3a>
 80028c6:	4629      	mov	r1, r5
 80028c8:	4630      	mov	r0, r6
 80028ca:	47c0      	blx	r8
 80028cc:	4307      	orrs	r7, r0
 80028ce:	3568      	adds	r5, #104	; 0x68
 80028d0:	e7e9      	b.n	80028a6 <_fwalk_reent+0x12>

080028d2 <__retarget_lock_init_recursive>:
 80028d2:	4770      	bx	lr

080028d4 <__retarget_lock_acquire_recursive>:
 80028d4:	4770      	bx	lr

080028d6 <__retarget_lock_release_recursive>:
 80028d6:	4770      	bx	lr

080028d8 <_free_r>:
 80028d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028da:	2900      	cmp	r1, #0
 80028dc:	d044      	beq.n	8002968 <_free_r+0x90>
 80028de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028e2:	9001      	str	r0, [sp, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f1a1 0404 	sub.w	r4, r1, #4
 80028ea:	bfb8      	it	lt
 80028ec:	18e4      	addlt	r4, r4, r3
 80028ee:	f000 fc61 	bl	80031b4 <__malloc_lock>
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <_free_r+0x94>)
 80028f4:	9801      	ldr	r0, [sp, #4]
 80028f6:	6813      	ldr	r3, [r2, #0]
 80028f8:	b933      	cbnz	r3, 8002908 <_free_r+0x30>
 80028fa:	6063      	str	r3, [r4, #4]
 80028fc:	6014      	str	r4, [r2, #0]
 80028fe:	b003      	add	sp, #12
 8002900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002904:	f000 bc5c 	b.w	80031c0 <__malloc_unlock>
 8002908:	42a3      	cmp	r3, r4
 800290a:	d908      	bls.n	800291e <_free_r+0x46>
 800290c:	6825      	ldr	r5, [r4, #0]
 800290e:	1961      	adds	r1, r4, r5
 8002910:	428b      	cmp	r3, r1
 8002912:	bf01      	itttt	eq
 8002914:	6819      	ldreq	r1, [r3, #0]
 8002916:	685b      	ldreq	r3, [r3, #4]
 8002918:	1949      	addeq	r1, r1, r5
 800291a:	6021      	streq	r1, [r4, #0]
 800291c:	e7ed      	b.n	80028fa <_free_r+0x22>
 800291e:	461a      	mov	r2, r3
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	b10b      	cbz	r3, 8002928 <_free_r+0x50>
 8002924:	42a3      	cmp	r3, r4
 8002926:	d9fa      	bls.n	800291e <_free_r+0x46>
 8002928:	6811      	ldr	r1, [r2, #0]
 800292a:	1855      	adds	r5, r2, r1
 800292c:	42a5      	cmp	r5, r4
 800292e:	d10b      	bne.n	8002948 <_free_r+0x70>
 8002930:	6824      	ldr	r4, [r4, #0]
 8002932:	4421      	add	r1, r4
 8002934:	1854      	adds	r4, r2, r1
 8002936:	42a3      	cmp	r3, r4
 8002938:	6011      	str	r1, [r2, #0]
 800293a:	d1e0      	bne.n	80028fe <_free_r+0x26>
 800293c:	681c      	ldr	r4, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	6053      	str	r3, [r2, #4]
 8002942:	4421      	add	r1, r4
 8002944:	6011      	str	r1, [r2, #0]
 8002946:	e7da      	b.n	80028fe <_free_r+0x26>
 8002948:	d902      	bls.n	8002950 <_free_r+0x78>
 800294a:	230c      	movs	r3, #12
 800294c:	6003      	str	r3, [r0, #0]
 800294e:	e7d6      	b.n	80028fe <_free_r+0x26>
 8002950:	6825      	ldr	r5, [r4, #0]
 8002952:	1961      	adds	r1, r4, r5
 8002954:	428b      	cmp	r3, r1
 8002956:	bf04      	itt	eq
 8002958:	6819      	ldreq	r1, [r3, #0]
 800295a:	685b      	ldreq	r3, [r3, #4]
 800295c:	6063      	str	r3, [r4, #4]
 800295e:	bf04      	itt	eq
 8002960:	1949      	addeq	r1, r1, r5
 8002962:	6021      	streq	r1, [r4, #0]
 8002964:	6054      	str	r4, [r2, #4]
 8002966:	e7ca      	b.n	80028fe <_free_r+0x26>
 8002968:	b003      	add	sp, #12
 800296a:	bd30      	pop	{r4, r5, pc}
 800296c:	20011788 	.word	0x20011788

08002970 <sbrk_aligned>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4e0e      	ldr	r6, [pc, #56]	; (80029ac <sbrk_aligned+0x3c>)
 8002974:	460c      	mov	r4, r1
 8002976:	6831      	ldr	r1, [r6, #0]
 8002978:	4605      	mov	r5, r0
 800297a:	b911      	cbnz	r1, 8002982 <sbrk_aligned+0x12>
 800297c:	f000 fb7c 	bl	8003078 <_sbrk_r>
 8002980:	6030      	str	r0, [r6, #0]
 8002982:	4621      	mov	r1, r4
 8002984:	4628      	mov	r0, r5
 8002986:	f000 fb77 	bl	8003078 <_sbrk_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	d00a      	beq.n	80029a4 <sbrk_aligned+0x34>
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d007      	beq.n	80029a8 <sbrk_aligned+0x38>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4628      	mov	r0, r5
 800299c:	f000 fb6c 	bl	8003078 <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d101      	bne.n	80029a8 <sbrk_aligned+0x38>
 80029a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80029a8:	4620      	mov	r0, r4
 80029aa:	bd70      	pop	{r4, r5, r6, pc}
 80029ac:	2001178c 	.word	0x2001178c

080029b0 <_malloc_r>:
 80029b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b4:	1ccd      	adds	r5, r1, #3
 80029b6:	f025 0503 	bic.w	r5, r5, #3
 80029ba:	3508      	adds	r5, #8
 80029bc:	2d0c      	cmp	r5, #12
 80029be:	bf38      	it	cc
 80029c0:	250c      	movcc	r5, #12
 80029c2:	2d00      	cmp	r5, #0
 80029c4:	4607      	mov	r7, r0
 80029c6:	db01      	blt.n	80029cc <_malloc_r+0x1c>
 80029c8:	42a9      	cmp	r1, r5
 80029ca:	d905      	bls.n	80029d8 <_malloc_r+0x28>
 80029cc:	230c      	movs	r3, #12
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	2600      	movs	r6, #0
 80029d2:	4630      	mov	r0, r6
 80029d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d8:	4e2e      	ldr	r6, [pc, #184]	; (8002a94 <_malloc_r+0xe4>)
 80029da:	f000 fbeb 	bl	80031b4 <__malloc_lock>
 80029de:	6833      	ldr	r3, [r6, #0]
 80029e0:	461c      	mov	r4, r3
 80029e2:	bb34      	cbnz	r4, 8002a32 <_malloc_r+0x82>
 80029e4:	4629      	mov	r1, r5
 80029e6:	4638      	mov	r0, r7
 80029e8:	f7ff ffc2 	bl	8002970 <sbrk_aligned>
 80029ec:	1c43      	adds	r3, r0, #1
 80029ee:	4604      	mov	r4, r0
 80029f0:	d14d      	bne.n	8002a8e <_malloc_r+0xde>
 80029f2:	6834      	ldr	r4, [r6, #0]
 80029f4:	4626      	mov	r6, r4
 80029f6:	2e00      	cmp	r6, #0
 80029f8:	d140      	bne.n	8002a7c <_malloc_r+0xcc>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4631      	mov	r1, r6
 80029fe:	4638      	mov	r0, r7
 8002a00:	eb04 0803 	add.w	r8, r4, r3
 8002a04:	f000 fb38 	bl	8003078 <_sbrk_r>
 8002a08:	4580      	cmp	r8, r0
 8002a0a:	d13a      	bne.n	8002a82 <_malloc_r+0xd2>
 8002a0c:	6821      	ldr	r1, [r4, #0]
 8002a0e:	3503      	adds	r5, #3
 8002a10:	1a6d      	subs	r5, r5, r1
 8002a12:	f025 0503 	bic.w	r5, r5, #3
 8002a16:	3508      	adds	r5, #8
 8002a18:	2d0c      	cmp	r5, #12
 8002a1a:	bf38      	it	cc
 8002a1c:	250c      	movcc	r5, #12
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4638      	mov	r0, r7
 8002a22:	f7ff ffa5 	bl	8002970 <sbrk_aligned>
 8002a26:	3001      	adds	r0, #1
 8002a28:	d02b      	beq.n	8002a82 <_malloc_r+0xd2>
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	442b      	add	r3, r5
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	e00e      	b.n	8002a50 <_malloc_r+0xa0>
 8002a32:	6822      	ldr	r2, [r4, #0]
 8002a34:	1b52      	subs	r2, r2, r5
 8002a36:	d41e      	bmi.n	8002a76 <_malloc_r+0xc6>
 8002a38:	2a0b      	cmp	r2, #11
 8002a3a:	d916      	bls.n	8002a6a <_malloc_r+0xba>
 8002a3c:	1961      	adds	r1, r4, r5
 8002a3e:	42a3      	cmp	r3, r4
 8002a40:	6025      	str	r5, [r4, #0]
 8002a42:	bf18      	it	ne
 8002a44:	6059      	strne	r1, [r3, #4]
 8002a46:	6863      	ldr	r3, [r4, #4]
 8002a48:	bf08      	it	eq
 8002a4a:	6031      	streq	r1, [r6, #0]
 8002a4c:	5162      	str	r2, [r4, r5]
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	4638      	mov	r0, r7
 8002a52:	f104 060b 	add.w	r6, r4, #11
 8002a56:	f000 fbb3 	bl	80031c0 <__malloc_unlock>
 8002a5a:	f026 0607 	bic.w	r6, r6, #7
 8002a5e:	1d23      	adds	r3, r4, #4
 8002a60:	1af2      	subs	r2, r6, r3
 8002a62:	d0b6      	beq.n	80029d2 <_malloc_r+0x22>
 8002a64:	1b9b      	subs	r3, r3, r6
 8002a66:	50a3      	str	r3, [r4, r2]
 8002a68:	e7b3      	b.n	80029d2 <_malloc_r+0x22>
 8002a6a:	6862      	ldr	r2, [r4, #4]
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	bf0c      	ite	eq
 8002a70:	6032      	streq	r2, [r6, #0]
 8002a72:	605a      	strne	r2, [r3, #4]
 8002a74:	e7ec      	b.n	8002a50 <_malloc_r+0xa0>
 8002a76:	4623      	mov	r3, r4
 8002a78:	6864      	ldr	r4, [r4, #4]
 8002a7a:	e7b2      	b.n	80029e2 <_malloc_r+0x32>
 8002a7c:	4634      	mov	r4, r6
 8002a7e:	6876      	ldr	r6, [r6, #4]
 8002a80:	e7b9      	b.n	80029f6 <_malloc_r+0x46>
 8002a82:	230c      	movs	r3, #12
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4638      	mov	r0, r7
 8002a88:	f000 fb9a 	bl	80031c0 <__malloc_unlock>
 8002a8c:	e7a1      	b.n	80029d2 <_malloc_r+0x22>
 8002a8e:	6025      	str	r5, [r4, #0]
 8002a90:	e7de      	b.n	8002a50 <_malloc_r+0xa0>
 8002a92:	bf00      	nop
 8002a94:	20011788 	.word	0x20011788

08002a98 <__ssputs_r>:
 8002a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a9c:	688e      	ldr	r6, [r1, #8]
 8002a9e:	429e      	cmp	r6, r3
 8002aa0:	4682      	mov	sl, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4690      	mov	r8, r2
 8002aa6:	461f      	mov	r7, r3
 8002aa8:	d838      	bhi.n	8002b1c <__ssputs_r+0x84>
 8002aaa:	898a      	ldrh	r2, [r1, #12]
 8002aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ab0:	d032      	beq.n	8002b18 <__ssputs_r+0x80>
 8002ab2:	6825      	ldr	r5, [r4, #0]
 8002ab4:	6909      	ldr	r1, [r1, #16]
 8002ab6:	eba5 0901 	sub.w	r9, r5, r1
 8002aba:	6965      	ldr	r5, [r4, #20]
 8002abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	444b      	add	r3, r9
 8002ac8:	106d      	asrs	r5, r5, #1
 8002aca:	429d      	cmp	r5, r3
 8002acc:	bf38      	it	cc
 8002ace:	461d      	movcc	r5, r3
 8002ad0:	0553      	lsls	r3, r2, #21
 8002ad2:	d531      	bpl.n	8002b38 <__ssputs_r+0xa0>
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7ff ff6b 	bl	80029b0 <_malloc_r>
 8002ada:	4606      	mov	r6, r0
 8002adc:	b950      	cbnz	r0, 8002af4 <__ssputs_r+0x5c>
 8002ade:	230c      	movs	r3, #12
 8002ae0:	f8ca 3000 	str.w	r3, [sl]
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	6921      	ldr	r1, [r4, #16]
 8002af6:	464a      	mov	r2, r9
 8002af8:	f000 fb34 	bl	8003164 <memcpy>
 8002afc:	89a3      	ldrh	r3, [r4, #12]
 8002afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	6126      	str	r6, [r4, #16]
 8002b0a:	6165      	str	r5, [r4, #20]
 8002b0c:	444e      	add	r6, r9
 8002b0e:	eba5 0509 	sub.w	r5, r5, r9
 8002b12:	6026      	str	r6, [r4, #0]
 8002b14:	60a5      	str	r5, [r4, #8]
 8002b16:	463e      	mov	r6, r7
 8002b18:	42be      	cmp	r6, r7
 8002b1a:	d900      	bls.n	8002b1e <__ssputs_r+0x86>
 8002b1c:	463e      	mov	r6, r7
 8002b1e:	6820      	ldr	r0, [r4, #0]
 8002b20:	4632      	mov	r2, r6
 8002b22:	4641      	mov	r1, r8
 8002b24:	f000 fb2c 	bl	8003180 <memmove>
 8002b28:	68a3      	ldr	r3, [r4, #8]
 8002b2a:	1b9b      	subs	r3, r3, r6
 8002b2c:	60a3      	str	r3, [r4, #8]
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	4433      	add	r3, r6
 8002b32:	6023      	str	r3, [r4, #0]
 8002b34:	2000      	movs	r0, #0
 8002b36:	e7db      	b.n	8002af0 <__ssputs_r+0x58>
 8002b38:	462a      	mov	r2, r5
 8002b3a:	f000 fb47 	bl	80031cc <_realloc_r>
 8002b3e:	4606      	mov	r6, r0
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1e1      	bne.n	8002b08 <__ssputs_r+0x70>
 8002b44:	6921      	ldr	r1, [r4, #16]
 8002b46:	4650      	mov	r0, sl
 8002b48:	f7ff fec6 	bl	80028d8 <_free_r>
 8002b4c:	e7c7      	b.n	8002ade <__ssputs_r+0x46>
	...

08002b50 <_svfiprintf_r>:
 8002b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b54:	4698      	mov	r8, r3
 8002b56:	898b      	ldrh	r3, [r1, #12]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	b09d      	sub	sp, #116	; 0x74
 8002b5c:	4607      	mov	r7, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	4614      	mov	r4, r2
 8002b62:	d50e      	bpl.n	8002b82 <_svfiprintf_r+0x32>
 8002b64:	690b      	ldr	r3, [r1, #16]
 8002b66:	b963      	cbnz	r3, 8002b82 <_svfiprintf_r+0x32>
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	f7ff ff21 	bl	80029b0 <_malloc_r>
 8002b6e:	6028      	str	r0, [r5, #0]
 8002b70:	6128      	str	r0, [r5, #16]
 8002b72:	b920      	cbnz	r0, 8002b7e <_svfiprintf_r+0x2e>
 8002b74:	230c      	movs	r3, #12
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b7c:	e0d1      	b.n	8002d22 <_svfiprintf_r+0x1d2>
 8002b7e:	2340      	movs	r3, #64	; 0x40
 8002b80:	616b      	str	r3, [r5, #20]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9309      	str	r3, [sp, #36]	; 0x24
 8002b86:	2320      	movs	r3, #32
 8002b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b90:	2330      	movs	r3, #48	; 0x30
 8002b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002d3c <_svfiprintf_r+0x1ec>
 8002b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b9a:	f04f 0901 	mov.w	r9, #1
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	469a      	mov	sl, r3
 8002ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ba6:	b10a      	cbz	r2, 8002bac <_svfiprintf_r+0x5c>
 8002ba8:	2a25      	cmp	r2, #37	; 0x25
 8002baa:	d1f9      	bne.n	8002ba0 <_svfiprintf_r+0x50>
 8002bac:	ebba 0b04 	subs.w	fp, sl, r4
 8002bb0:	d00b      	beq.n	8002bca <_svfiprintf_r+0x7a>
 8002bb2:	465b      	mov	r3, fp
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	4638      	mov	r0, r7
 8002bba:	f7ff ff6d 	bl	8002a98 <__ssputs_r>
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	f000 80aa 	beq.w	8002d18 <_svfiprintf_r+0x1c8>
 8002bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bc6:	445a      	add	r2, fp
 8002bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8002bca:	f89a 3000 	ldrb.w	r3, [sl]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80a2 	beq.w	8002d18 <_svfiprintf_r+0x1c8>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bde:	f10a 0a01 	add.w	sl, sl, #1
 8002be2:	9304      	str	r3, [sp, #16]
 8002be4:	9307      	str	r3, [sp, #28]
 8002be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bea:	931a      	str	r3, [sp, #104]	; 0x68
 8002bec:	4654      	mov	r4, sl
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf4:	4851      	ldr	r0, [pc, #324]	; (8002d3c <_svfiprintf_r+0x1ec>)
 8002bf6:	f7fd fb03 	bl	8000200 <memchr>
 8002bfa:	9a04      	ldr	r2, [sp, #16]
 8002bfc:	b9d8      	cbnz	r0, 8002c36 <_svfiprintf_r+0xe6>
 8002bfe:	06d0      	lsls	r0, r2, #27
 8002c00:	bf44      	itt	mi
 8002c02:	2320      	movmi	r3, #32
 8002c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c08:	0711      	lsls	r1, r2, #28
 8002c0a:	bf44      	itt	mi
 8002c0c:	232b      	movmi	r3, #43	; 0x2b
 8002c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c12:	f89a 3000 	ldrb.w	r3, [sl]
 8002c16:	2b2a      	cmp	r3, #42	; 0x2a
 8002c18:	d015      	beq.n	8002c46 <_svfiprintf_r+0xf6>
 8002c1a:	9a07      	ldr	r2, [sp, #28]
 8002c1c:	4654      	mov	r4, sl
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f04f 0c0a 	mov.w	ip, #10
 8002c24:	4621      	mov	r1, r4
 8002c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c2a:	3b30      	subs	r3, #48	; 0x30
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	d94e      	bls.n	8002cce <_svfiprintf_r+0x17e>
 8002c30:	b1b0      	cbz	r0, 8002c60 <_svfiprintf_r+0x110>
 8002c32:	9207      	str	r2, [sp, #28]
 8002c34:	e014      	b.n	8002c60 <_svfiprintf_r+0x110>
 8002c36:	eba0 0308 	sub.w	r3, r0, r8
 8002c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	46a2      	mov	sl, r4
 8002c44:	e7d2      	b.n	8002bec <_svfiprintf_r+0x9c>
 8002c46:	9b03      	ldr	r3, [sp, #12]
 8002c48:	1d19      	adds	r1, r3, #4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	9103      	str	r1, [sp, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bfbb      	ittet	lt
 8002c52:	425b      	neglt	r3, r3
 8002c54:	f042 0202 	orrlt.w	r2, r2, #2
 8002c58:	9307      	strge	r3, [sp, #28]
 8002c5a:	9307      	strlt	r3, [sp, #28]
 8002c5c:	bfb8      	it	lt
 8002c5e:	9204      	strlt	r2, [sp, #16]
 8002c60:	7823      	ldrb	r3, [r4, #0]
 8002c62:	2b2e      	cmp	r3, #46	; 0x2e
 8002c64:	d10c      	bne.n	8002c80 <_svfiprintf_r+0x130>
 8002c66:	7863      	ldrb	r3, [r4, #1]
 8002c68:	2b2a      	cmp	r3, #42	; 0x2a
 8002c6a:	d135      	bne.n	8002cd8 <_svfiprintf_r+0x188>
 8002c6c:	9b03      	ldr	r3, [sp, #12]
 8002c6e:	1d1a      	adds	r2, r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	9203      	str	r2, [sp, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bfb8      	it	lt
 8002c78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002c7c:	3402      	adds	r4, #2
 8002c7e:	9305      	str	r3, [sp, #20]
 8002c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d4c <_svfiprintf_r+0x1fc>
 8002c84:	7821      	ldrb	r1, [r4, #0]
 8002c86:	2203      	movs	r2, #3
 8002c88:	4650      	mov	r0, sl
 8002c8a:	f7fd fab9 	bl	8000200 <memchr>
 8002c8e:	b140      	cbz	r0, 8002ca2 <_svfiprintf_r+0x152>
 8002c90:	2340      	movs	r3, #64	; 0x40
 8002c92:	eba0 000a 	sub.w	r0, r0, sl
 8002c96:	fa03 f000 	lsl.w	r0, r3, r0
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	4303      	orrs	r3, r0
 8002c9e:	3401      	adds	r4, #1
 8002ca0:	9304      	str	r3, [sp, #16]
 8002ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ca6:	4826      	ldr	r0, [pc, #152]	; (8002d40 <_svfiprintf_r+0x1f0>)
 8002ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cac:	2206      	movs	r2, #6
 8002cae:	f7fd faa7 	bl	8000200 <memchr>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d038      	beq.n	8002d28 <_svfiprintf_r+0x1d8>
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <_svfiprintf_r+0x1f4>)
 8002cb8:	bb1b      	cbnz	r3, 8002d02 <_svfiprintf_r+0x1b2>
 8002cba:	9b03      	ldr	r3, [sp, #12]
 8002cbc:	3307      	adds	r3, #7
 8002cbe:	f023 0307 	bic.w	r3, r3, #7
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	9303      	str	r3, [sp, #12]
 8002cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cc8:	4433      	add	r3, r6
 8002cca:	9309      	str	r3, [sp, #36]	; 0x24
 8002ccc:	e767      	b.n	8002b9e <_svfiprintf_r+0x4e>
 8002cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	e7a5      	b.n	8002c24 <_svfiprintf_r+0xd4>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	3401      	adds	r4, #1
 8002cdc:	9305      	str	r3, [sp, #20]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 0c0a 	mov.w	ip, #10
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cea:	3a30      	subs	r2, #48	; 0x30
 8002cec:	2a09      	cmp	r2, #9
 8002cee:	d903      	bls.n	8002cf8 <_svfiprintf_r+0x1a8>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0c5      	beq.n	8002c80 <_svfiprintf_r+0x130>
 8002cf4:	9105      	str	r1, [sp, #20]
 8002cf6:	e7c3      	b.n	8002c80 <_svfiprintf_r+0x130>
 8002cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e7f0      	b.n	8002ce4 <_svfiprintf_r+0x194>
 8002d02:	ab03      	add	r3, sp, #12
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	462a      	mov	r2, r5
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <_svfiprintf_r+0x1f8>)
 8002d0a:	a904      	add	r1, sp, #16
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	f3af 8000 	nop.w
 8002d12:	1c42      	adds	r2, r0, #1
 8002d14:	4606      	mov	r6, r0
 8002d16:	d1d6      	bne.n	8002cc6 <_svfiprintf_r+0x176>
 8002d18:	89ab      	ldrh	r3, [r5, #12]
 8002d1a:	065b      	lsls	r3, r3, #25
 8002d1c:	f53f af2c 	bmi.w	8002b78 <_svfiprintf_r+0x28>
 8002d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d22:	b01d      	add	sp, #116	; 0x74
 8002d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d28:	ab03      	add	r3, sp, #12
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	462a      	mov	r2, r5
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <_svfiprintf_r+0x1f8>)
 8002d30:	a904      	add	r1, sp, #16
 8002d32:	4638      	mov	r0, r7
 8002d34:	f000 f87a 	bl	8002e2c <_printf_i>
 8002d38:	e7eb      	b.n	8002d12 <_svfiprintf_r+0x1c2>
 8002d3a:	bf00      	nop
 8002d3c:	08003b84 	.word	0x08003b84
 8002d40:	08003b8e 	.word	0x08003b8e
 8002d44:	00000000 	.word	0x00000000
 8002d48:	08002a99 	.word	0x08002a99
 8002d4c:	08003b8a 	.word	0x08003b8a

08002d50 <_printf_common>:
 8002d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d54:	4616      	mov	r6, r2
 8002d56:	4699      	mov	r9, r3
 8002d58:	688a      	ldr	r2, [r1, #8]
 8002d5a:	690b      	ldr	r3, [r1, #16]
 8002d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d60:	4293      	cmp	r3, r2
 8002d62:	bfb8      	it	lt
 8002d64:	4613      	movlt	r3, r2
 8002d66:	6033      	str	r3, [r6, #0]
 8002d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d6c:	4607      	mov	r7, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	b10a      	cbz	r2, 8002d76 <_printf_common+0x26>
 8002d72:	3301      	adds	r3, #1
 8002d74:	6033      	str	r3, [r6, #0]
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	0699      	lsls	r1, r3, #26
 8002d7a:	bf42      	ittt	mi
 8002d7c:	6833      	ldrmi	r3, [r6, #0]
 8002d7e:	3302      	addmi	r3, #2
 8002d80:	6033      	strmi	r3, [r6, #0]
 8002d82:	6825      	ldr	r5, [r4, #0]
 8002d84:	f015 0506 	ands.w	r5, r5, #6
 8002d88:	d106      	bne.n	8002d98 <_printf_common+0x48>
 8002d8a:	f104 0a19 	add.w	sl, r4, #25
 8002d8e:	68e3      	ldr	r3, [r4, #12]
 8002d90:	6832      	ldr	r2, [r6, #0]
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	dc26      	bgt.n	8002de6 <_printf_common+0x96>
 8002d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d9c:	1e13      	subs	r3, r2, #0
 8002d9e:	6822      	ldr	r2, [r4, #0]
 8002da0:	bf18      	it	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	0692      	lsls	r2, r2, #26
 8002da6:	d42b      	bmi.n	8002e00 <_printf_common+0xb0>
 8002da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dac:	4649      	mov	r1, r9
 8002dae:	4638      	mov	r0, r7
 8002db0:	47c0      	blx	r8
 8002db2:	3001      	adds	r0, #1
 8002db4:	d01e      	beq.n	8002df4 <_printf_common+0xa4>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	68e5      	ldr	r5, [r4, #12]
 8002dba:	6832      	ldr	r2, [r6, #0]
 8002dbc:	f003 0306 	and.w	r3, r3, #6
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	bf08      	it	eq
 8002dc4:	1aad      	subeq	r5, r5, r2
 8002dc6:	68a3      	ldr	r3, [r4, #8]
 8002dc8:	6922      	ldr	r2, [r4, #16]
 8002dca:	bf0c      	ite	eq
 8002dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dd0:	2500      	movne	r5, #0
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	bfc4      	itt	gt
 8002dd6:	1a9b      	subgt	r3, r3, r2
 8002dd8:	18ed      	addgt	r5, r5, r3
 8002dda:	2600      	movs	r6, #0
 8002ddc:	341a      	adds	r4, #26
 8002dde:	42b5      	cmp	r5, r6
 8002de0:	d11a      	bne.n	8002e18 <_printf_common+0xc8>
 8002de2:	2000      	movs	r0, #0
 8002de4:	e008      	b.n	8002df8 <_printf_common+0xa8>
 8002de6:	2301      	movs	r3, #1
 8002de8:	4652      	mov	r2, sl
 8002dea:	4649      	mov	r1, r9
 8002dec:	4638      	mov	r0, r7
 8002dee:	47c0      	blx	r8
 8002df0:	3001      	adds	r0, #1
 8002df2:	d103      	bne.n	8002dfc <_printf_common+0xac>
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dfc:	3501      	adds	r5, #1
 8002dfe:	e7c6      	b.n	8002d8e <_printf_common+0x3e>
 8002e00:	18e1      	adds	r1, r4, r3
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	2030      	movs	r0, #48	; 0x30
 8002e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e0a:	4422      	add	r2, r4
 8002e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e14:	3302      	adds	r3, #2
 8002e16:	e7c7      	b.n	8002da8 <_printf_common+0x58>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	4649      	mov	r1, r9
 8002e1e:	4638      	mov	r0, r7
 8002e20:	47c0      	blx	r8
 8002e22:	3001      	adds	r0, #1
 8002e24:	d0e6      	beq.n	8002df4 <_printf_common+0xa4>
 8002e26:	3601      	adds	r6, #1
 8002e28:	e7d9      	b.n	8002dde <_printf_common+0x8e>
	...

08002e2c <_printf_i>:
 8002e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e30:	7e0f      	ldrb	r7, [r1, #24]
 8002e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e34:	2f78      	cmp	r7, #120	; 0x78
 8002e36:	4691      	mov	r9, r2
 8002e38:	4680      	mov	r8, r0
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	469a      	mov	sl, r3
 8002e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e42:	d807      	bhi.n	8002e54 <_printf_i+0x28>
 8002e44:	2f62      	cmp	r7, #98	; 0x62
 8002e46:	d80a      	bhi.n	8002e5e <_printf_i+0x32>
 8002e48:	2f00      	cmp	r7, #0
 8002e4a:	f000 80d8 	beq.w	8002ffe <_printf_i+0x1d2>
 8002e4e:	2f58      	cmp	r7, #88	; 0x58
 8002e50:	f000 80a3 	beq.w	8002f9a <_printf_i+0x16e>
 8002e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e5c:	e03a      	b.n	8002ed4 <_printf_i+0xa8>
 8002e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e62:	2b15      	cmp	r3, #21
 8002e64:	d8f6      	bhi.n	8002e54 <_printf_i+0x28>
 8002e66:	a101      	add	r1, pc, #4	; (adr r1, 8002e6c <_printf_i+0x40>)
 8002e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e6c:	08002ec5 	.word	0x08002ec5
 8002e70:	08002ed9 	.word	0x08002ed9
 8002e74:	08002e55 	.word	0x08002e55
 8002e78:	08002e55 	.word	0x08002e55
 8002e7c:	08002e55 	.word	0x08002e55
 8002e80:	08002e55 	.word	0x08002e55
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	08002e55 	.word	0x08002e55
 8002e8c:	08002e55 	.word	0x08002e55
 8002e90:	08002e55 	.word	0x08002e55
 8002e94:	08002e55 	.word	0x08002e55
 8002e98:	08002fe5 	.word	0x08002fe5
 8002e9c:	08002f09 	.word	0x08002f09
 8002ea0:	08002fc7 	.word	0x08002fc7
 8002ea4:	08002e55 	.word	0x08002e55
 8002ea8:	08002e55 	.word	0x08002e55
 8002eac:	08003007 	.word	0x08003007
 8002eb0:	08002e55 	.word	0x08002e55
 8002eb4:	08002f09 	.word	0x08002f09
 8002eb8:	08002e55 	.word	0x08002e55
 8002ebc:	08002e55 	.word	0x08002e55
 8002ec0:	08002fcf 	.word	0x08002fcf
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	1d1a      	adds	r2, r3, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	602a      	str	r2, [r5, #0]
 8002ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0a3      	b.n	8003020 <_printf_i+0x1f4>
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	6829      	ldr	r1, [r5, #0]
 8002edc:	0606      	lsls	r6, r0, #24
 8002ede:	f101 0304 	add.w	r3, r1, #4
 8002ee2:	d50a      	bpl.n	8002efa <_printf_i+0xce>
 8002ee4:	680e      	ldr	r6, [r1, #0]
 8002ee6:	602b      	str	r3, [r5, #0]
 8002ee8:	2e00      	cmp	r6, #0
 8002eea:	da03      	bge.n	8002ef4 <_printf_i+0xc8>
 8002eec:	232d      	movs	r3, #45	; 0x2d
 8002eee:	4276      	negs	r6, r6
 8002ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ef4:	485e      	ldr	r0, [pc, #376]	; (8003070 <_printf_i+0x244>)
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	e019      	b.n	8002f2e <_printf_i+0x102>
 8002efa:	680e      	ldr	r6, [r1, #0]
 8002efc:	602b      	str	r3, [r5, #0]
 8002efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f02:	bf18      	it	ne
 8002f04:	b236      	sxthne	r6, r6
 8002f06:	e7ef      	b.n	8002ee8 <_printf_i+0xbc>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	1d19      	adds	r1, r3, #4
 8002f0e:	6029      	str	r1, [r5, #0]
 8002f10:	0601      	lsls	r1, r0, #24
 8002f12:	d501      	bpl.n	8002f18 <_printf_i+0xec>
 8002f14:	681e      	ldr	r6, [r3, #0]
 8002f16:	e002      	b.n	8002f1e <_printf_i+0xf2>
 8002f18:	0646      	lsls	r6, r0, #25
 8002f1a:	d5fb      	bpl.n	8002f14 <_printf_i+0xe8>
 8002f1c:	881e      	ldrh	r6, [r3, #0]
 8002f1e:	4854      	ldr	r0, [pc, #336]	; (8003070 <_printf_i+0x244>)
 8002f20:	2f6f      	cmp	r7, #111	; 0x6f
 8002f22:	bf0c      	ite	eq
 8002f24:	2308      	moveq	r3, #8
 8002f26:	230a      	movne	r3, #10
 8002f28:	2100      	movs	r1, #0
 8002f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f2e:	6865      	ldr	r5, [r4, #4]
 8002f30:	60a5      	str	r5, [r4, #8]
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	bfa2      	ittt	ge
 8002f36:	6821      	ldrge	r1, [r4, #0]
 8002f38:	f021 0104 	bicge.w	r1, r1, #4
 8002f3c:	6021      	strge	r1, [r4, #0]
 8002f3e:	b90e      	cbnz	r6, 8002f44 <_printf_i+0x118>
 8002f40:	2d00      	cmp	r5, #0
 8002f42:	d04d      	beq.n	8002fe0 <_printf_i+0x1b4>
 8002f44:	4615      	mov	r5, r2
 8002f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8002f4e:	5dc7      	ldrb	r7, [r0, r7]
 8002f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f54:	4637      	mov	r7, r6
 8002f56:	42bb      	cmp	r3, r7
 8002f58:	460e      	mov	r6, r1
 8002f5a:	d9f4      	bls.n	8002f46 <_printf_i+0x11a>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d10b      	bne.n	8002f78 <_printf_i+0x14c>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	07de      	lsls	r6, r3, #31
 8002f64:	d508      	bpl.n	8002f78 <_printf_i+0x14c>
 8002f66:	6923      	ldr	r3, [r4, #16]
 8002f68:	6861      	ldr	r1, [r4, #4]
 8002f6a:	4299      	cmp	r1, r3
 8002f6c:	bfde      	ittt	le
 8002f6e:	2330      	movle	r3, #48	; 0x30
 8002f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002f78:	1b52      	subs	r2, r2, r5
 8002f7a:	6122      	str	r2, [r4, #16]
 8002f7c:	f8cd a000 	str.w	sl, [sp]
 8002f80:	464b      	mov	r3, r9
 8002f82:	aa03      	add	r2, sp, #12
 8002f84:	4621      	mov	r1, r4
 8002f86:	4640      	mov	r0, r8
 8002f88:	f7ff fee2 	bl	8002d50 <_printf_common>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d14c      	bne.n	800302a <_printf_i+0x1fe>
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f94:	b004      	add	sp, #16
 8002f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9a:	4835      	ldr	r0, [pc, #212]	; (8003070 <_printf_i+0x244>)
 8002f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fa0:	6829      	ldr	r1, [r5, #0]
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fa8:	6029      	str	r1, [r5, #0]
 8002faa:	061d      	lsls	r5, r3, #24
 8002fac:	d514      	bpl.n	8002fd8 <_printf_i+0x1ac>
 8002fae:	07df      	lsls	r7, r3, #31
 8002fb0:	bf44      	itt	mi
 8002fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8002fb6:	6023      	strmi	r3, [r4, #0]
 8002fb8:	b91e      	cbnz	r6, 8002fc2 <_printf_i+0x196>
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	f023 0320 	bic.w	r3, r3, #32
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	e7b0      	b.n	8002f28 <_printf_i+0xfc>
 8002fc6:	6823      	ldr	r3, [r4, #0]
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	2378      	movs	r3, #120	; 0x78
 8002fd0:	4828      	ldr	r0, [pc, #160]	; (8003074 <_printf_i+0x248>)
 8002fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fd6:	e7e3      	b.n	8002fa0 <_printf_i+0x174>
 8002fd8:	0659      	lsls	r1, r3, #25
 8002fda:	bf48      	it	mi
 8002fdc:	b2b6      	uxthmi	r6, r6
 8002fde:	e7e6      	b.n	8002fae <_printf_i+0x182>
 8002fe0:	4615      	mov	r5, r2
 8002fe2:	e7bb      	b.n	8002f5c <_printf_i+0x130>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	6826      	ldr	r6, [r4, #0]
 8002fe8:	6961      	ldr	r1, [r4, #20]
 8002fea:	1d18      	adds	r0, r3, #4
 8002fec:	6028      	str	r0, [r5, #0]
 8002fee:	0635      	lsls	r5, r6, #24
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	d501      	bpl.n	8002ff8 <_printf_i+0x1cc>
 8002ff4:	6019      	str	r1, [r3, #0]
 8002ff6:	e002      	b.n	8002ffe <_printf_i+0x1d2>
 8002ff8:	0670      	lsls	r0, r6, #25
 8002ffa:	d5fb      	bpl.n	8002ff4 <_printf_i+0x1c8>
 8002ffc:	8019      	strh	r1, [r3, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	6123      	str	r3, [r4, #16]
 8003002:	4615      	mov	r5, r2
 8003004:	e7ba      	b.n	8002f7c <_printf_i+0x150>
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	1d1a      	adds	r2, r3, #4
 800300a:	602a      	str	r2, [r5, #0]
 800300c:	681d      	ldr	r5, [r3, #0]
 800300e:	6862      	ldr	r2, [r4, #4]
 8003010:	2100      	movs	r1, #0
 8003012:	4628      	mov	r0, r5
 8003014:	f7fd f8f4 	bl	8000200 <memchr>
 8003018:	b108      	cbz	r0, 800301e <_printf_i+0x1f2>
 800301a:	1b40      	subs	r0, r0, r5
 800301c:	6060      	str	r0, [r4, #4]
 800301e:	6863      	ldr	r3, [r4, #4]
 8003020:	6123      	str	r3, [r4, #16]
 8003022:	2300      	movs	r3, #0
 8003024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003028:	e7a8      	b.n	8002f7c <_printf_i+0x150>
 800302a:	6923      	ldr	r3, [r4, #16]
 800302c:	462a      	mov	r2, r5
 800302e:	4649      	mov	r1, r9
 8003030:	4640      	mov	r0, r8
 8003032:	47d0      	blx	sl
 8003034:	3001      	adds	r0, #1
 8003036:	d0ab      	beq.n	8002f90 <_printf_i+0x164>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	079b      	lsls	r3, r3, #30
 800303c:	d413      	bmi.n	8003066 <_printf_i+0x23a>
 800303e:	68e0      	ldr	r0, [r4, #12]
 8003040:	9b03      	ldr	r3, [sp, #12]
 8003042:	4298      	cmp	r0, r3
 8003044:	bfb8      	it	lt
 8003046:	4618      	movlt	r0, r3
 8003048:	e7a4      	b.n	8002f94 <_printf_i+0x168>
 800304a:	2301      	movs	r3, #1
 800304c:	4632      	mov	r2, r6
 800304e:	4649      	mov	r1, r9
 8003050:	4640      	mov	r0, r8
 8003052:	47d0      	blx	sl
 8003054:	3001      	adds	r0, #1
 8003056:	d09b      	beq.n	8002f90 <_printf_i+0x164>
 8003058:	3501      	adds	r5, #1
 800305a:	68e3      	ldr	r3, [r4, #12]
 800305c:	9903      	ldr	r1, [sp, #12]
 800305e:	1a5b      	subs	r3, r3, r1
 8003060:	42ab      	cmp	r3, r5
 8003062:	dcf2      	bgt.n	800304a <_printf_i+0x21e>
 8003064:	e7eb      	b.n	800303e <_printf_i+0x212>
 8003066:	2500      	movs	r5, #0
 8003068:	f104 0619 	add.w	r6, r4, #25
 800306c:	e7f5      	b.n	800305a <_printf_i+0x22e>
 800306e:	bf00      	nop
 8003070:	08003b95 	.word	0x08003b95
 8003074:	08003ba6 	.word	0x08003ba6

08003078 <_sbrk_r>:
 8003078:	b538      	push	{r3, r4, r5, lr}
 800307a:	4d06      	ldr	r5, [pc, #24]	; (8003094 <_sbrk_r+0x1c>)
 800307c:	2300      	movs	r3, #0
 800307e:	4604      	mov	r4, r0
 8003080:	4608      	mov	r0, r1
 8003082:	602b      	str	r3, [r5, #0]
 8003084:	f7fe f95e 	bl	8001344 <_sbrk>
 8003088:	1c43      	adds	r3, r0, #1
 800308a:	d102      	bne.n	8003092 <_sbrk_r+0x1a>
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	b103      	cbz	r3, 8003092 <_sbrk_r+0x1a>
 8003090:	6023      	str	r3, [r4, #0]
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	20011790 	.word	0x20011790

08003098 <__sread>:
 8003098:	b510      	push	{r4, lr}
 800309a:	460c      	mov	r4, r1
 800309c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a0:	f000 f8c4 	bl	800322c <_read_r>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	bfab      	itete	ge
 80030a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030aa:	89a3      	ldrhlt	r3, [r4, #12]
 80030ac:	181b      	addge	r3, r3, r0
 80030ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030b2:	bfac      	ite	ge
 80030b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80030b6:	81a3      	strhlt	r3, [r4, #12]
 80030b8:	bd10      	pop	{r4, pc}

080030ba <__swrite>:
 80030ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030be:	461f      	mov	r7, r3
 80030c0:	898b      	ldrh	r3, [r1, #12]
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	4605      	mov	r5, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	4616      	mov	r6, r2
 80030ca:	d505      	bpl.n	80030d8 <__swrite+0x1e>
 80030cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d0:	2302      	movs	r3, #2
 80030d2:	2200      	movs	r2, #0
 80030d4:	f000 f834 	bl	8003140 <_lseek_r>
 80030d8:	89a3      	ldrh	r3, [r4, #12]
 80030da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030e2:	81a3      	strh	r3, [r4, #12]
 80030e4:	4632      	mov	r2, r6
 80030e6:	463b      	mov	r3, r7
 80030e8:	4628      	mov	r0, r5
 80030ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030ee:	f7ff b9e9 	b.w	80024c4 <_write_r>

080030f2 <__sseek>:
 80030f2:	b510      	push	{r4, lr}
 80030f4:	460c      	mov	r4, r1
 80030f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fa:	f000 f821 	bl	8003140 <_lseek_r>
 80030fe:	1c43      	adds	r3, r0, #1
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	bf15      	itete	ne
 8003104:	6560      	strne	r0, [r4, #84]	; 0x54
 8003106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800310a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800310e:	81a3      	strheq	r3, [r4, #12]
 8003110:	bf18      	it	ne
 8003112:	81a3      	strhne	r3, [r4, #12]
 8003114:	bd10      	pop	{r4, pc}

08003116 <__sclose>:
 8003116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311a:	f000 b801 	b.w	8003120 <_close_r>
	...

08003120 <_close_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	4d06      	ldr	r5, [pc, #24]	; (800313c <_close_r+0x1c>)
 8003124:	2300      	movs	r3, #0
 8003126:	4604      	mov	r4, r0
 8003128:	4608      	mov	r0, r1
 800312a:	602b      	str	r3, [r5, #0]
 800312c:	f7fe f8f0 	bl	8001310 <_close>
 8003130:	1c43      	adds	r3, r0, #1
 8003132:	d102      	bne.n	800313a <_close_r+0x1a>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	b103      	cbz	r3, 800313a <_close_r+0x1a>
 8003138:	6023      	str	r3, [r4, #0]
 800313a:	bd38      	pop	{r3, r4, r5, pc}
 800313c:	20011790 	.word	0x20011790

08003140 <_lseek_r>:
 8003140:	b538      	push	{r3, r4, r5, lr}
 8003142:	4d07      	ldr	r5, [pc, #28]	; (8003160 <_lseek_r+0x20>)
 8003144:	4604      	mov	r4, r0
 8003146:	4608      	mov	r0, r1
 8003148:	4611      	mov	r1, r2
 800314a:	2200      	movs	r2, #0
 800314c:	602a      	str	r2, [r5, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f7fe f8ea 	bl	8001328 <_lseek>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d102      	bne.n	800315e <_lseek_r+0x1e>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	b103      	cbz	r3, 800315e <_lseek_r+0x1e>
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	bd38      	pop	{r3, r4, r5, pc}
 8003160:	20011790 	.word	0x20011790

08003164 <memcpy>:
 8003164:	440a      	add	r2, r1
 8003166:	4291      	cmp	r1, r2
 8003168:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800316c:	d100      	bne.n	8003170 <memcpy+0xc>
 800316e:	4770      	bx	lr
 8003170:	b510      	push	{r4, lr}
 8003172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800317a:	4291      	cmp	r1, r2
 800317c:	d1f9      	bne.n	8003172 <memcpy+0xe>
 800317e:	bd10      	pop	{r4, pc}

08003180 <memmove>:
 8003180:	4288      	cmp	r0, r1
 8003182:	b510      	push	{r4, lr}
 8003184:	eb01 0402 	add.w	r4, r1, r2
 8003188:	d902      	bls.n	8003190 <memmove+0x10>
 800318a:	4284      	cmp	r4, r0
 800318c:	4623      	mov	r3, r4
 800318e:	d807      	bhi.n	80031a0 <memmove+0x20>
 8003190:	1e43      	subs	r3, r0, #1
 8003192:	42a1      	cmp	r1, r4
 8003194:	d008      	beq.n	80031a8 <memmove+0x28>
 8003196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800319a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800319e:	e7f8      	b.n	8003192 <memmove+0x12>
 80031a0:	4402      	add	r2, r0
 80031a2:	4601      	mov	r1, r0
 80031a4:	428a      	cmp	r2, r1
 80031a6:	d100      	bne.n	80031aa <memmove+0x2a>
 80031a8:	bd10      	pop	{r4, pc}
 80031aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031b2:	e7f7      	b.n	80031a4 <memmove+0x24>

080031b4 <__malloc_lock>:
 80031b4:	4801      	ldr	r0, [pc, #4]	; (80031bc <__malloc_lock+0x8>)
 80031b6:	f7ff bb8d 	b.w	80028d4 <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	20011784 	.word	0x20011784

080031c0 <__malloc_unlock>:
 80031c0:	4801      	ldr	r0, [pc, #4]	; (80031c8 <__malloc_unlock+0x8>)
 80031c2:	f7ff bb88 	b.w	80028d6 <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	20011784 	.word	0x20011784

080031cc <_realloc_r>:
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d0:	4680      	mov	r8, r0
 80031d2:	4614      	mov	r4, r2
 80031d4:	460e      	mov	r6, r1
 80031d6:	b921      	cbnz	r1, 80031e2 <_realloc_r+0x16>
 80031d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031dc:	4611      	mov	r1, r2
 80031de:	f7ff bbe7 	b.w	80029b0 <_malloc_r>
 80031e2:	b92a      	cbnz	r2, 80031f0 <_realloc_r+0x24>
 80031e4:	f7ff fb78 	bl	80028d8 <_free_r>
 80031e8:	4625      	mov	r5, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	f000 f82e 	bl	8003250 <_malloc_usable_size_r>
 80031f4:	4284      	cmp	r4, r0
 80031f6:	4607      	mov	r7, r0
 80031f8:	d802      	bhi.n	8003200 <_realloc_r+0x34>
 80031fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80031fe:	d812      	bhi.n	8003226 <_realloc_r+0x5a>
 8003200:	4621      	mov	r1, r4
 8003202:	4640      	mov	r0, r8
 8003204:	f7ff fbd4 	bl	80029b0 <_malloc_r>
 8003208:	4605      	mov	r5, r0
 800320a:	2800      	cmp	r0, #0
 800320c:	d0ed      	beq.n	80031ea <_realloc_r+0x1e>
 800320e:	42bc      	cmp	r4, r7
 8003210:	4622      	mov	r2, r4
 8003212:	4631      	mov	r1, r6
 8003214:	bf28      	it	cs
 8003216:	463a      	movcs	r2, r7
 8003218:	f7ff ffa4 	bl	8003164 <memcpy>
 800321c:	4631      	mov	r1, r6
 800321e:	4640      	mov	r0, r8
 8003220:	f7ff fb5a 	bl	80028d8 <_free_r>
 8003224:	e7e1      	b.n	80031ea <_realloc_r+0x1e>
 8003226:	4635      	mov	r5, r6
 8003228:	e7df      	b.n	80031ea <_realloc_r+0x1e>
	...

0800322c <_read_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4d07      	ldr	r5, [pc, #28]	; (800324c <_read_r+0x20>)
 8003230:	4604      	mov	r4, r0
 8003232:	4608      	mov	r0, r1
 8003234:	4611      	mov	r1, r2
 8003236:	2200      	movs	r2, #0
 8003238:	602a      	str	r2, [r5, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f7fe f82f 	bl	800129e <_read>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_read_r+0x1e>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	b103      	cbz	r3, 800324a <_read_r+0x1e>
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	20011790 	.word	0x20011790

08003250 <_malloc_usable_size_r>:
 8003250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003254:	1f18      	subs	r0, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	bfbc      	itt	lt
 800325a:	580b      	ldrlt	r3, [r1, r0]
 800325c:	18c0      	addlt	r0, r0, r3
 800325e:	4770      	bx	lr

08003260 <_init>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr

0800326c <_fini>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr
